name: picdiary익스프레스서버 배포워크플로우

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: push을 위한 도커허브로그인 미리해둠
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 의존성(라이브러리) 설치
        run: |
          echo "--------------------현재위치확인----------------"
          pwd

          echo "--------------------이미 존재하는 깃폴더 삭제----------------"
          rm -rf picdiary_repository_backend

          echo "--------------------git clone으로 코드 가져오기----------------"
          git clone https://github.com/rnjstjddo/picdiary_repository_backend.git

          echo "--------------------picdiary_repository_backend 폴더이동 ----------------"
          cd picdiary_repository_backend


          echo "--------------------의존성(라이브러리) 설치----------------"
          npm ci

          echo "-------------------- views 폴더이동 ----------------"
          cd views
          echo "-------------------- 폴더파일목록확인 ----------------"
          ls

          echo "--------------------리액트 의존성(라이브러리) 설치----------------"
          npm ci

          echo "--------------------리액트 이미지생성 ----------------"
          docker build -f Dockerfile_3000 -t ${{ secrets.DOCKERHUB_USERNAME }}/react .

          echo "--------------------리액트 도커허브로 push ----------------"
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/react

          echo "--------------------- 리액트 도커이미지 pull ---------------------"   
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/react


          echo "--------------------- 리액트 종료된 컨테이너 확인 ---------------------"   
          IS_UP_REACT_EXITED_BEFORE=$(sudo docker ps -a -f "status=exited" -f "name=react" -q)

          echo "--------------------- 결과 -> $IS_UP_REACT_EXITED_BEFORE --------------------"   

             if [ $IS_UP_REACT_EXITED_BEFORE ];then
                docker rm react
             fi

          echo "--------------------- 리액트 도커컨테이너 실행여부확인 ---------------------"   
          IS_UP_REACT_BEFORE=$(sudo docker ps -a -f "status=running" -f "name=react" -q)

          echo "--------------------- 결과 -> $IS_UP_REACT_BEFORE --------------------"   
              if [ $IS_UP_REACT_BEFORE ];then
                echo "--------------------- 리액트 실행중 도커컨테이너 종료-------------------"   
                docker stop react
                echo "--------------------- 리액트 react 이미지 삭제------------" 
                IS_UP_REACT_BEFORE_IMAGE=$(docker ps -af "name=react" | tail -n +2 | awk '{print $2}')
                docker rm react
                echo "--------------------- 결과 -> $IS_UP_REACT_BEFORE_IMAGE------------" 
                docker image rmi $IS_UP_REACT_BEFORE_IMAGE
                
              fi

          echo "--------------------- 리액트 도커컨테이너 실행---------------------"   
          docker run -d --name react -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/react

           
          cd ..
          echo "--------------------리액트 views 폴더 삭제 ----------------"
          rm -rf views

          echo "--------------------도커이미지 생성전에 도커컨테이너 실행확인 .env파일에 포트지정위해 ----------------"
          IS_EXITED=$(sudo docker ps -a -f "status=exited" -q)

          echo "---------------------이미지빌드전 IS_EXITED 값 확인 -> $IS_EXITED"
          if [ -n "$IS_EXITED" ]; then
            echo "--------------------- 이미지빌드전 exited상태 컨테이너 삭제 ---------------------"            
            sudo docker rm $(sudo docker ps -a -f "status=exited" -q)
          fi

          IS_BLUE=$(sudo docker ps -a -f 'name=blue')
          IS_GREEN=$(sudo docker ps -a -f 'name=green')


          echo "--------------------- 이미지빌드전 IS_BLUE 값 확인 ------------------------"
          echo "$IS_BLUE"

          echo "--------------------- 이미지빌드전 IS_GREEN 값 확인 -----------------------"
          echo "$IS_GREEN"

          PRESENT_PORT_BEFORE=$(awk '{print $3}' /etc/nginx/conf.d/service-url.inc | cut -c 22-25) 
          echo "--------------------- 엔진엑스의 포트확인 -> $PRESENT_PORT_BEFORE "   
          if [ $PRESENT_PORT_BEFORE = "8081" ];then
            echo "--------------------- 엔진엑스 포트 8081이기에 8082로 지정"
            cp /home/ubuntu/node8082/.env ./
          else  
            echo "--------------------- 엔진엑스 포트 8082이기에 8081로 지정"
            cp /home/ubuntu/node8081/.env ./
          fi
          echo "--------------------현재위치확인과 파일확인----------------"
          pwd
          ls -al

          echo "--------------------- 도커이미지 생성과 도커허브로 푸시 ---------------------"   
          ENV_PORT=$(awk '/PORT/' ./.env)           
          PRESENT_PORT=$(awk '{print $3}' /etc/nginx/conf.d/service-url.inc | cut -c 22-25)   


          if [ $PRESENT_PORT = "8081" ];then
            echo "--------------------- 현재포트 8081 동작중 도커이미지출력--------------------- "   
            docker images
            echo "--------------------- 현재포트 8081 동작중 새로운 도커이미지에 8082태그  붙임 ---------------------"   
            docker build -f Dockerfile_8082 -t ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082 .

            echo "--------------------- 현재포트 8081 동작중 도커이미지 8082 push ---------------------"   
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082
            echo "--------------------- 현재포트 8081 동작중  도커이미지 8082삭제 ---------------------"   
            docker image rmi ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082 

          else
            echo "--------------------- 현재포트 8082 동작중 도커이미지출력 ---------------------"   
            docker images  
            
            echo "--------------------- 현재포트 8082 동작중 8081태그 도커이미지에 붙임--------------------- "   
            docker build -f Dockerfile_8081 -t ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081 .

            echo "--------------------- 현재포트 8082 동작중 도커이미지 8081 push ---------------------"   
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081
            echo "--------------------- 현재포트 8082 동작중 도커이미지 8081삭제 ---------------------"   
            docker image rmi ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081
          fi

      - name: 이미지 pull 후 컨테이너실행
        run: |
          PRESENT_PORT=$(awk '{print $3}' /etc/nginx/conf.d/service-url.inc | cut -c 22-25) 
          echo "--------------------- 엔진엑스의 포트확인 -> $PRESENT_PORT "   
          if [ $PRESENT_PORT = "8081" ];then
            echo "--------------------- 엔진엑스 8081포트 현재동작중인데 8082 컨테이너 동작중이면 중지하기 ----------"
            IS_UP_GREEN_BEFORE=$(sudo docker ps -a -f "status=running" -f "name=green" -q)
            echo "--------------------- 결과 -> $IS_UP_GREEN_BEFORE --------------------"   
            
            if [ $IS_UP_GREEN_BEFORE ];then
              echo "--------------------- 8082 green 종료-------------------"   
              docker stop green
              docker rm green
            fi

            echo "--------------------- 엔진엑스 8082포트 현재동작중인데 green 이미지존재하면 삭제------------" 
            IS_UP_GREEN_BEFORE_IMAGE=$(docker ps -af "name=green" | tail -n +2 | awk '{print $2}')
            echo "--------------------- 결과 -> $IS_UP_GREEN_BEFORE_IMAGE------------" 
            if [ $IS_UP_GREEN_BEFORE_IMAGE ];then
              docker image rmi $IS_UP_GREEN_BEFORE_IMAGE
            fi

            echo "--------------------- 엔진엑스 8081포트 현재동작중 도커이미지 8082가져오기"
            docker pull  ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082

            echo "--------------------- 8082 green 컨테이너실행 ---------------------"   
            docker run -d --name green -p 8082:8082 ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082
            echo "--------------------- 8082 green 엔진엑스 포트변경 후 재실행---------------------"   
            sudo sed -i "s/8081/8082/g" /etc/nginx/conf.d/service-url.inc  
            sudo nginx -s reload
            echo "--------------------- 8081 blue 상태가 up인지 확인--------------------"   
            IS_UP_BLUE=$(docker ps -af "name=blue" | tail -n +2 | awk '{print $2}')
            echo "--------------------- 결과 -> $IS_UP_BLUE --------------------"   
            
            if [ $IS_UP_BLUE ];then
              echo "--------------------- 8081 blue 종료하고 이미지삭제--------------------"   
              docker stop blue
              docker rm blue
              docker image rmi $IS_UP_BLUE
            fi
          else
            
            echo "--------------------- 엔진엑스 8082포트 현재동작중인데 blue 동작중이면 중지하기------------" 
             IS_UP_BLUE_BEFORE=$(sudo docker ps -a -f "status=running" -f "name=blue" -q)
            echo "--------------------- 결과 -> $IS_UP_BLUE_BEFORE --------------------"   
            
            if [ $IS_UP_BLUE_BEFORE ];then
              docker stop blue
              docker rm blue
            fi
            echo "--------------------- 엔진엑스 8082포트 현재동작중인데 blue 이미지존재하면 삭제------------" 
            IS_UP_BLUE_BEFORE_IMAGE=$(docker ps -af "name=blue" | tail -n +2 | awk '{print $2}')
            echo "--------------------- 결과 -> $IS_UP_BLUE_BEFORE_IMAGE------------" 
            if [ $IS_UP_BLUE_BEFORE_IMAGE ];then
              docker image rmi $IS_UP_BLUE_BEFORE_IMAGE
            fi
            echo "--------------------- 엔진엑스 8082포트 현재동작중 도커이미지 8081가져오기" 
            docker pull  ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081

            echo "--------------------- 8081 blue 컨테이너실행 ---------------------"   
            docker run -d --name blue -p 8081:8081 ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081

            echo "--------------------- 8081 blue 엔진엑스 포트변경 후 재실행---------------------"   
            sudo sed -i "s/8082/8081/g" /etc/nginx/conf.d/service-url.inc  
            sudo nginx -s reload

            echo "--------------------- 8082 green 상태가 up인지 확인--------------------"   
            IS_UP_GREEN=$(docker ps -af "name=green" | tail -n +2 | awk '{print $2}')
            echo "--------------------- 결과 -> $IS_UP_GREEN --------------------"   
            

            if [ $IS_UP_GREEN ];then
              echo "--------------------- 8082 green 종료하고 사용된 이미지삭제--------------------"   
              docker stop green
              docker rm green
              docker image rmi $IS_UP_GREEN
            fi
          fi
