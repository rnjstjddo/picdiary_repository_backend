name: picdiary익스프레스서버 배포워크플로우

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: push을 위한 도커허브로그인 미리해둠
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 의존성(라이브러리) 설치
        run: |
          echo "--------------------현재위치확인----------------"
          pwd

          echo "--------------------이미 존재하는 깃폴더 삭제----------------"
          rm -rf picdiary_repository_backend

          echo "--------------------git clone으로 코드가져오기----------------"
          git clone https://github.com/rnjstjddo/picdiary_repository_backend.git

          echo "--------------------picdiary_repository_backend 폴더이동 ----------------"
          cd picdiary_repository_backend


          echo "--------------------의존성(라이브러리) 설치----------------"
          npm ci


          echo "--------------------도커이미지 생성전에 도커컨테이너 실행확인 .env파일에 포트지정위해----------------"
          IS_EXITED=$(sudo docker ps -a -f status=exited -q)

          echo "---------------------이미지빌드전 IS_EXITED 값 확인 -> $IS_EXITED"
          if [ -n "$IS_EXITED" ]; then
            echo "--------------------- 이미지빌드전 exited상태 컨테이너 삭제 ---------------------"            
            sudo docker rm $(sudo docker ps -a -f status=exited -q)
          fi

          IS_BLUE=$(sudo docker ps -a -f 'name=blue')
          IS_GREEN=$(sudo docker ps -a -f 'name=green')
          echo "--------------------- 이미지빌드전 IS_BLUE 값 확인 -> $IS_BLUE"
          echo "--------------------- 이미지빌드전 IS_GREEN 값 확인 -> $IS_GREEN"

          if [ -z $IS_BLUE_RUN ] && [ -z $IS_GREEN_RUN ];then
            echo "---------------------  blue와 green 컨테이너 모두 동작하지 않기에 blue 컨테이너 8081포트로 이미지생성"
            cp /home/ubuntu/node8081/.env ./
          elif [ -n $IS_BLUE_RUN ];then
            echo "--------------------- blue 컨테이너 동작하기에 green 8082 포트로 이미지생성"
            cp /home/ubuntu/node8082/.env ./
          else 
            echo "--------------------- green 컨테이너 동작하기에 blue 8081 포트로 이미지생성"
            cp /home/ubuntu/node8081/.env ./
          fi

          echo "--------------------현재위치확인과 파일확인----------------"
          pwd
          ls -al

          echo "-------------------- 프론드엔드 views 폴더보기 ----------------"
          cd views
          ls
          cd ..

          echo "-------------------- build폴더생성 ----------------"
          mkdir build
          ls
          echo "-------------------- build폴더에 담기 ----------------"
          mv views/build build
          cd build/build
          ls
          cd ..
          cd ..
          echo "-------------------- views폴더삭제 ----------------"
          rm -rf views
          echo "-------------------- views/build폴더 생성 ----------------"
          mkdir views
          cd views
          mkdir build
          cd ..
          echo "-------------------- views/build 확인 ----------------"
          mv build/build views/build
          cd views/build
          ls
          cd ..
          cd ..
          echo "-------------------- build 폴더삭제----------------"
          rm -rf build

          echo "--------------------- 현재위치확인 ---------------------"            
          pwd
          echo "--------------------- 현재위치에서 폴더확인 ---------------------"            
          ls

          echo "--------------------- 도커이미지 생성과 도커허브로 푸시 ---------------------"   
          ENV_PORT=$(awk '/PORT/' ./.env)           
          PRESENT_PORT=$(awk '{print $3}' /etc/nginx/conf.d/service-url.inc | cut -c 18-21)   


          if [ $PRESENT_PORT = "8081" ];then
            echo "--------------------- 현재포트 8081 동작중 도커이미지출력--------------------- "   
            docker images
            echo "--------------------- 현재포트 8081 동작중 새로운 도커이미지에 8082태그  붙임 ---------------------"   
            docker build -f Dockerfile_8082 -t ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082 .

            echo "--------------------- 현재포트 8081 동작중 도커이미지 8082 push ---------------------"   
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082
            echo "--------------------- 현재포트 8081 동작중  도커이미지 8082삭제 ---------------------"   
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082 

          else
            echo "--------------------- 현재포트 8082 동작중 도커이미지출력 ---------------------"   
            docker images  
            
            echo "--------------------- 현재포트 8082 동작중 8081태그 도커이미지에 붙임--------------------- "   
            docker build -f Dockerfile_8081 -t ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081 .

            echo "--------------------- 현재포트 8082 동작중 도커이미지 8081 push ---------------------"   
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081
            echo "--------------------- 현재포트 8082 동작중 도커이미지 8081삭제 ---------------------"   
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081
          fi

      - name: 이미지 pull 후 컨테이너실행
        run: |
          PRESENT_PORT=$(awk '{print $3}' /etc/nginx/conf.d/service-url.inc | cut -c 18-21) 
          echo "--------------------- 엔진엑스의 포트확인 -> $PRESENT_PORT "   
          if [ $PRESENT_PORT = "8081" ];then
            echo "--------------------- 엔진엑스 8081포트 현재동작중 도커이미지 8082가져오기"
            PS_GREEN_IF=$(sudo docker ps -a -f name=green -q)
            echo "--------------------- $PS_GREEN_IF ---------------------"   
           
            docker pull  ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082
            echo "--------------------- 8082 green 컨테이너실행 ---------------------"   
            docker run -d --name green -p 8082:8082 ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082
            echo "--------------------- 8082 green 엔진엑스 포트변경 후 재실행---------------------"   
            sudo sed -i "s/8081/8082/g" /etc/nginx/conf.d/service-url.inc  
            sudo nginx -s reload
            echo "--------------------- 8081 blue 이미지삭제---------------------"   
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081

          else
            echo "--------------------- 엔진엑스 8082포트 현재동작중 도커이미지 8081가져오기" 
            PS_BLUE_IF=$(sudo docker ps -a -f name=blue -q)
            echo "--------------------- $PS_BLUE_IF ---------------------"   
           
            docker pull  ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081
            echo "--------------------- 8081 blue 컨테이너실행 ---------------------"   
            docker run -d --name blue -p 8081:8081 ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8081
            echo "--------------------- 8081 blue 엔진엑스 포트변경 후 재실행---------------------"   
            sudo sed -i "s/8082/8081/g" /etc/nginx/conf.d/service-url.inc  
            sudo nginx -s reload
            echo "--------------------- 8082 green 이미지삭제--------------------"   
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/picdiary:8082
          fi
