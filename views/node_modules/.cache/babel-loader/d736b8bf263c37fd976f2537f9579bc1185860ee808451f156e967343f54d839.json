{"ast":null,"code":"import{createAsyncThunk,createSlice}from\"@reduxjs/toolkit\";import{joinPost,loginPost,logoutGet,forSession}from\"../api/memberApi\";import{getCookie,removeCookie,setCookie}from\"../util/cookieUtil\";const initState={email:\"\"};//애플리케이션 로딩시 쿠키값가져오기\nconst loadMemberCookie=()=>{const memberInfo=getCookie(\"member\");console.log(\"loginSlice.js loadMemberCookie() 진입 애플리케이션로딩시 member 이름 쿠키가져옴 -> \",memberInfo);const accessToken=getCookie(\"accessToken\");if(memberInfo&&memberInfo.user){// if (memberInfo && memberInfo.nickname) {\n//   memberInfo.nickname = decodeURIComponent(memberInfo.nickname);\n// }\nreturn memberInfo.user.email;}return{...initState};};//비동기 세션생성위해 로그인후 재요청\nexport const forSessionAsync=createAsyncThunk(\"forSessionAsync\",param=>{return forSession(param);});//비동기 로그인\nexport const loginPostAsync=createAsyncThunk(\"loginPostAsync\",param=>{return loginPost(param);});//비동기 회원가입\nexport const joinPostAsync=createAsyncThunk(\"joinPostAsync\",param=>{return joinPost(param);});//비동기 로그아웃\nexport const logoutGetAsync=createAsyncThunk(\"logoutGetAsync\",()=>{return logoutGet();});const loginSlice=createSlice({name:\"loginSlice\",initialState:loadMemberCookie()||initState,// initialState: initState,\nreducers:{// login: (state, action) => {\n//   const data = action.payload;\n//   console.log(\n//     \"loginSlice에서 login액션함수에서 axios 후 결과 payload담긴값 확인 => \",\n//     data\n//   );\n//   //쿠키담기\n//   //setCookie(\"member\", JSON.stringify(data), 1);\n//   //return data;\n//   return { email: data };\n// },\n//  logout: (state, action) => {\n//removeCookie(\"member\");\n//  console.log(\n//  \"loginSlice에서 logout 액션함수에서 axios 후 결과 payload담긴값 확인 => \",\n//action.payload\n//);\n//return { ...initState };\n//},\n// join: (state, action) => {\n//   const data = action.payload;\n//   return data;\n// },\n},//비동기\nextraReducers:builder=>{builder.addCase(loginPostAsync.fulfilled,(state,action)=>{const payload=action.payload;console.log(\"loginSlice에서 loginPostAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",payload);console.log(\"loginSlice에서 loginPostAsync 리듀서함수에서 fulfilled 진입 리듀서의 state => \",state);//쿠키담기\nif(!payload.error){setCookie(\"member\",JSON.stringify(payload),1);}return payload.user.email;//상태변경\n}).addCase(loginPostAsync.pending,(state,action)=>{}).addCase(loginPostAsync.rejected,(state,action)=>{console.log(\"loginSlice에서 loginPostAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",action.payload);}).addCase(joinPostAsync.fulfilled,(state,action)=>{const payload=action.payload;console.log(\"loginSlice에서 joinPostAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",payload);//return payload;\n}).addCase(joinPostAsync.pending,(state,action)=>{console.log(\"loginSlice에서 joinPostAsync 리듀서함수에서 pending 진입 payload담긴값 확인 => \",action);}).addCase(joinPostAsync.rejected,(state,action)=>{const payload=action.payload;console.log(\"loginSlice에서 joinPostAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",payload);}).addCase(logoutGetAsync.fulfilled,(state,action)=>{const payload=action.payload;console.log(\"loginSlice에서 logoutGetAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",payload);removeCookie(\"member\");removeCookie(\"accessToken\");return{...initState};}).addCase(logoutGetAsync.pending,(state,action)=>{}).addCase(logoutGetAsync.rejected,(state,action)=>{const payload=action.payload;console.log(\"loginSlice에서 logoutGetAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",payload);}).addCase(forSessionAsync.fulfilled,(state,action)=>{const payload=action.payload;console.log(\"loginSlice에서 forSessionAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",payload);return payload;}).addCase(forSessionAsync.pending,(state,action)=>{}).addCase(forSessionAsync.rejected,(state,action)=>{const payload=action.payload;console.log(\"loginSlice에서 forSessionAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",payload);});}});export const{login,logout,join}=loginSlice.actions;export default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","joinPost","loginPost","logoutGet","forSession","getCookie","removeCookie","setCookie","initState","email","loadMemberCookie","memberInfo","console","log","accessToken","user","forSessionAsync","param","loginPostAsync","joinPostAsync","logoutGetAsync","loginSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","error","JSON","stringify","pending","rejected","login","logout","join","actions","reducer"],"sources":["C:/Users/win10/Desktop/picdiary/views/src/slices/loginSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { joinPost, loginPost, logoutGet, forSession } from \"../api/memberApi\";\r\nimport { getCookie, removeCookie, setCookie } from \"../util/cookieUtil\";\r\n\r\nconst initState = {\r\n  email: \"\",\r\n};\r\n\r\n//애플리케이션 로딩시 쿠키값가져오기\r\nconst loadMemberCookie = () => {\r\n  const memberInfo = getCookie(\"member\");\r\n  console.log(\r\n    \"loginSlice.js loadMemberCookie() 진입 애플리케이션로딩시 member 이름 쿠키가져옴 -> \",\r\n    memberInfo\r\n  );\r\n  const accessToken = getCookie(\"accessToken\");\r\n\r\n  if (memberInfo && memberInfo.user) {\r\n    // if (memberInfo && memberInfo.nickname) {\r\n    //   memberInfo.nickname = decodeURIComponent(memberInfo.nickname);\r\n    // }\r\n    return memberInfo.user.email;\r\n  }\r\n  return { ...initState };\r\n};\r\n\r\n//비동기 세션생성위해 로그인후 재요청\r\nexport const forSessionAsync = createAsyncThunk(\"forSessionAsync\", (param) => {\r\n  return forSession(param);\r\n});\r\n\r\n//비동기 로그인\r\nexport const loginPostAsync = createAsyncThunk(\"loginPostAsync\", (param) => {\r\n  return loginPost(param);\r\n});\r\n\r\n//비동기 회원가입\r\nexport const joinPostAsync = createAsyncThunk(\"joinPostAsync\", (param) => {\r\n  return joinPost(param);\r\n});\r\n\r\n//비동기 로그아웃\r\nexport const logoutGetAsync = createAsyncThunk(\"logoutGetAsync\", () => {\r\n  return logoutGet();\r\n});\r\n\r\nconst loginSlice = createSlice({\r\n  name: \"loginSlice\",\r\n  initialState: loadMemberCookie() || initState,\r\n  // initialState: initState,\r\n\r\n  reducers: {\r\n    // login: (state, action) => {\r\n    //   const data = action.payload;\r\n    //   console.log(\r\n    //     \"loginSlice에서 login액션함수에서 axios 후 결과 payload담긴값 확인 => \",\r\n    //     data\r\n    //   );\r\n    //   //쿠키담기\r\n    //   //setCookie(\"member\", JSON.stringify(data), 1);\r\n    //   //return data;\r\n    //   return { email: data };\r\n    // },\r\n    //  logout: (state, action) => {\r\n    //removeCookie(\"member\");\r\n    //  console.log(\r\n    //  \"loginSlice에서 logout 액션함수에서 axios 후 결과 payload담긴값 확인 => \",\r\n    //action.payload\r\n    //);\r\n    //return { ...initState };\r\n    //},\r\n    // join: (state, action) => {\r\n    //   const data = action.payload;\r\n    //   return data;\r\n    // },\r\n  },\r\n  //비동기\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginPostAsync.fulfilled, (state, action) => {\r\n        const payload = action.payload;\r\n        console.log(\r\n          \"loginSlice에서 loginPostAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n        console.log(\r\n          \"loginSlice에서 loginPostAsync 리듀서함수에서 fulfilled 진입 리듀서의 state => \",\r\n          state\r\n        );\r\n\r\n        //쿠키담기\r\n        if (!payload.error) {\r\n          setCookie(\"member\", JSON.stringify(payload), 1);\r\n        }\r\n        return payload.user.email; //상태변경\r\n      })\r\n      .addCase(loginPostAsync.pending, (state, action) => {})\r\n      .addCase(loginPostAsync.rejected, (state, action) => {\r\n        console.log(\r\n          \"loginSlice에서 loginPostAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",\r\n          action.payload\r\n        );\r\n      })\r\n      .addCase(joinPostAsync.fulfilled, (state, action) => {\r\n        const payload = action.payload;\r\n\r\n        console.log(\r\n          \"loginSlice에서 joinPostAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n        //return payload;\r\n      })\r\n      .addCase(joinPostAsync.pending, (state, action) => {\r\n        console.log(\r\n          \"loginSlice에서 joinPostAsync 리듀서함수에서 pending 진입 payload담긴값 확인 => \",\r\n          action\r\n        );\r\n      })\r\n      .addCase(joinPostAsync.rejected, (state, action) => {\r\n        const payload = action.payload;\r\n        console.log(\r\n          \"loginSlice에서 joinPostAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n      })\r\n      .addCase(logoutGetAsync.fulfilled, (state, action) => {\r\n        const payload = action.payload;\r\n\r\n        console.log(\r\n          \"loginSlice에서 logoutGetAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n        removeCookie(\"member\");\r\n        removeCookie(\"accessToken\");\r\n\r\n        return { ...initState };\r\n      })\r\n      .addCase(logoutGetAsync.pending, (state, action) => {})\r\n      .addCase(logoutGetAsync.rejected, (state, action) => {\r\n        const payload = action.payload;\r\n        console.log(\r\n          \"loginSlice에서 logoutGetAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n      })\r\n      .addCase(forSessionAsync.fulfilled, (state, action) => {\r\n        const payload = action.payload;\r\n        console.log(\r\n          \"loginSlice에서 forSessionAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n        return payload;\r\n      })\r\n      .addCase(forSessionAsync.pending, (state, action) => {})\r\n      .addCase(forSessionAsync.rejected, (state, action) => {\r\n        const payload = action.payload;\r\n        console.log(\r\n          \"loginSlice에서 forSessionAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { login, logout, join } = loginSlice.actions;\r\n\r\nexport default loginSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}