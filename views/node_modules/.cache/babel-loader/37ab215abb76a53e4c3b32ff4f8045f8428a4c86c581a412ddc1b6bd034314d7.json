{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { createSearchParams, useNavigate, useSearchParams } from \"react-router-dom\";\nconst getNum = (param, defaultValue) => {\n  if (!param) {\n    return defaultValue;\n  }\n  return parseInt(param);\n};\nconst useCustomMove = () => {\n  _s();\n  const navigate = useNavigate();\n  const [refresh, setRefresh] = useState(false);\n  const [queryParams] = useSearchParams();\n  const page = queryParams.get(\"page\") ? parseInt(queryParams.get(\"page\")) : 1;\n  const size = queryParams.get(\"size\") ? parseInt(queryParams.get(\"size\")) : 10;\n  const queryDefault = createSearchParams({\n    page,\n    size\n  }).toString();\n  const moveToList = pageParam => {\n    let queryStr = \"\";\n    if (pageParam) {\n      const pageNum = getNum(pageParam.page, 1);\n      const sizeNum = getNum(pageParam.size, 10);\n      queryStr = createSearchParams({\n        page: pageNum,\n        size: sizeNum\n      }).toString();\n    } else {\n      queryStr = queryDefault;\n    }\n    //    navigate({ pathname: `../list`, search: queryStr });\n\n    setRefresh(!refresh);\n  }; //moveToList\n\n  //추가\n  const moveToModify = num => {\n    navigate({\n      pathname: `../modify/${num}`,\n      search: queryDefault\n    });\n  };\n\n  //추가\n  const moveToRead = num => {\n    navigate({\n      pathname: `../read/${num}`,\n      search: queryDefault\n    });\n  };\n\n  //추가\n  const moveToCreate = () => {\n    navigate({\n      pathname: `../create`\n    });\n  };\n  const moveToLogin = () => {\n    navigate({\n      pathname: `/login`\n    });\n  };\n  return {\n    moveToList,\n    page,\n    size,\n    moveToModify,\n    refresh,\n    moveToRead,\n    moveToLogin,\n    moveToCreate\n  };\n};\n_s(useCustomMove, \"7cazDTfrudn8hz486I1qceoAH8Y=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\nexport default useCustomMove;","map":{"version":3,"names":["useState","createSearchParams","useNavigate","useSearchParams","getNum","param","defaultValue","parseInt","useCustomMove","_s","navigate","refresh","setRefresh","queryParams","page","get","size","queryDefault","toString","moveToList","pageParam","queryStr","pageNum","sizeNum","moveToModify","num","pathname","search","moveToRead","moveToCreate","moveToLogin"],"sources":["C:/Users/win10/Desktop/picdiary/views/src/hooks/useCustomMove.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport {\r\n  createSearchParams,\r\n  useNavigate,\r\n  useSearchParams,\r\n} from \"react-router-dom\";\r\n\r\nconst getNum = (param, defaultValue) => {\r\n  if (!param) {\r\n    return defaultValue;\r\n  }\r\n  return parseInt(param);\r\n};\r\n\r\nconst useCustomMove = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [refresh, setRefresh] = useState(false);\r\n\r\n  const [queryParams] = useSearchParams();\r\n\r\n  const page = queryParams.get(\"page\") ? parseInt(queryParams.get(\"page\")) : 1;\r\n  const size = queryParams.get(\"size\") ? parseInt(queryParams.get(\"size\")) : 10;\r\n\r\n  const queryDefault = createSearchParams({ page, size }).toString();\r\n\r\n  const moveToList = (pageParam) => {\r\n    let queryStr = \"\";\r\n\r\n    if (pageParam) {\r\n      const pageNum = getNum(pageParam.page, 1);\r\n      const sizeNum = getNum(pageParam.size, 10);\r\n\r\n      queryStr = createSearchParams({\r\n        page: pageNum,\r\n        size: sizeNum,\r\n      }).toString();\r\n    } else {\r\n      queryStr = queryDefault;\r\n    }\r\n    //    navigate({ pathname: `../list`, search: queryStr });\r\n\r\n    setRefresh(!refresh);\r\n  }; //moveToList\r\n\r\n  //추가\r\n  const moveToModify = (num) => {\r\n    navigate({ pathname: `../modify/${num}`, search: queryDefault });\r\n  };\r\n\r\n  //추가\r\n  const moveToRead = (num) => {\r\n    navigate({ pathname: `../read/${num}`, search: queryDefault });\r\n  };\r\n\r\n  //추가\r\n  const moveToCreate = () => {\r\n    navigate({ pathname: `../create` });\r\n  };\r\n\r\n  const moveToLogin = () => {\r\n    navigate({ pathname: `/login` });\r\n  };\r\n  return {\r\n    moveToList,\r\n    page,\r\n    size,\r\n    moveToModify,\r\n    refresh,\r\n    moveToRead,\r\n    moveToLogin,\r\n    moveToCreate,\r\n  };\r\n};\r\n\r\nexport default useCustomMove;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SACEC,kBAAkB,EAClBC,WAAW,EACXC,eAAe,QACV,kBAAkB;AAEzB,MAAMC,MAAM,GAAGA,CAACC,KAAK,EAAEC,YAAY,KAAK;EACtC,IAAI,CAACD,KAAK,EAAE;IACV,OAAOC,YAAY;EACrB;EACA,OAAOC,QAAQ,CAACF,KAAK,CAAC;AACxB,CAAC;AAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAM,CAACa,WAAW,CAAC,GAAGV,eAAe,CAAC,CAAC;EAEvC,MAAMW,IAAI,GAAGD,WAAW,CAACE,GAAG,CAAC,MAAM,CAAC,GAAGR,QAAQ,CAACM,WAAW,CAACE,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC;EAC5E,MAAMC,IAAI,GAAGH,WAAW,CAACE,GAAG,CAAC,MAAM,CAAC,GAAGR,QAAQ,CAACM,WAAW,CAACE,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE;EAE7E,MAAME,YAAY,GAAGhB,kBAAkB,CAAC;IAAEa,IAAI;IAAEE;EAAK,CAAC,CAAC,CAACE,QAAQ,CAAC,CAAC;EAElE,MAAMC,UAAU,GAAIC,SAAS,IAAK;IAChC,IAAIC,QAAQ,GAAG,EAAE;IAEjB,IAAID,SAAS,EAAE;MACb,MAAME,OAAO,GAAGlB,MAAM,CAACgB,SAAS,CAACN,IAAI,EAAE,CAAC,CAAC;MACzC,MAAMS,OAAO,GAAGnB,MAAM,CAACgB,SAAS,CAACJ,IAAI,EAAE,EAAE,CAAC;MAE1CK,QAAQ,GAAGpB,kBAAkB,CAAC;QAC5Ba,IAAI,EAAEQ,OAAO;QACbN,IAAI,EAAEO;MACR,CAAC,CAAC,CAACL,QAAQ,CAAC,CAAC;IACf,CAAC,MAAM;MACLG,QAAQ,GAAGJ,YAAY;IACzB;IACA;;IAEAL,UAAU,CAAC,CAACD,OAAO,CAAC;EACtB,CAAC,CAAC,CAAC;;EAEH;EACA,MAAMa,YAAY,GAAIC,GAAG,IAAK;IAC5Bf,QAAQ,CAAC;MAAEgB,QAAQ,EAAE,aAAaD,GAAG,EAAE;MAAEE,MAAM,EAAEV;IAAa,CAAC,CAAC;EAClE,CAAC;;EAED;EACA,MAAMW,UAAU,GAAIH,GAAG,IAAK;IAC1Bf,QAAQ,CAAC;MAAEgB,QAAQ,EAAE,WAAWD,GAAG,EAAE;MAAEE,MAAM,EAAEV;IAAa,CAAC,CAAC;EAChE,CAAC;;EAED;EACA,MAAMY,YAAY,GAAGA,CAAA,KAAM;IACzBnB,QAAQ,CAAC;MAAEgB,QAAQ,EAAE;IAAY,CAAC,CAAC;EACrC,CAAC;EAED,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBpB,QAAQ,CAAC;MAAEgB,QAAQ,EAAE;IAAS,CAAC,CAAC;EAClC,CAAC;EACD,OAAO;IACLP,UAAU;IACVL,IAAI;IACJE,IAAI;IACJQ,YAAY;IACZb,OAAO;IACPiB,UAAU;IACVE,WAAW;IACXD;EACF,CAAC;AACH,CAAC;AAACpB,EAAA,CA3DID,aAAa;EAAA,QACAN,WAAW,EAINC,eAAe;AAAA;AAwDvC,eAAeK,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}