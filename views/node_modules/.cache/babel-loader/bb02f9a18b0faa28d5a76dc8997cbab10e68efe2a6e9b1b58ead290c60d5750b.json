{"ast":null,"code":"import axios from \"axios\";\nimport { dfs_xy_conv } from \"../utils/xy\";\n\n//const URL = \"http://apis.data.go.kr/B551182/\";\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0\nconst URL = \"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\";\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\n//?serviceKey=인증키&numOfRows=10&pageNo=1\n//&base_date=20210628&base_time=0600&nx=55&ny=127\n\nconst apiKey = process.env.REACT_APP_API_KEY;\nconsole.log(apiKey);\nexport const weatherapi = async () => {\n  if (navigator.geolocation) {\n    function saveCoords(coordsObj) {\n      localStorage.setItem(\"COORDS\", JSON.stringify(coordsObj));\n      //localstorage의 key, value 값은 모두 string 타입으로 저장되기때문에 변환시켜준다.\n    }\n    function handleSuccess(position) {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      const coordsObj = {\n        // 객체의 key,  value 값이 동일할 때에는 한번만 써줘도 된다.\n        latitude,\n        // localStorage에 객체로 value에 저장하기위해서 객체에 넣어준다.\n        longitude\n      };\n      saveCoords(coordsObj); // localStorage에 위치 저장\n    }\n    function handleError() {\n      console.log(\"cant not access to location\");\n    }\n    function askForCoords() {\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n    }\n    function loadCoords() {\n      const loadedCoords = localStorage.getItem(\"COORDS\");\n      if (loadedCoords === null) {\n        // localStorage에 좌표값이 저장되어있지않다면\n        askForCoords(); // 좌표값을 물어본다\n      }\n      const xyresult = dfs_xy_conv(\"toXY\", loadedCoords.latitude, loadedCoords.longitude);\n      var weatherapiresult = null;\n      console.log(\"위경도를 xy변경후 : \", xyresult);\n      const aaAxios = async () => {\n        await axios.get(URL, {\n          params: {\n            serviceKey: apiKey,\n            numOfRows: 10,\n            pageNo: 1,\n            dataType: \"JSON\",\n            base_date: \"20250310\",\n            base_time: \"0600\",\n            nx: xyresult.x,\n            ny: xyresult.y\n          }\n        }).then(result => {\n          console.log(\"openAPI axios 결과\", result);\n          weatherapiresult = result.data.response.body.items.item;\n          console.log(\"openAPI axios weatherapiresult\", weatherapiresult);\n          return weatherapiresult;\n        }).catch(e => {\n          console.log(\"openAPI axios 에러발생\", e);\n        });\n      }; //aaAxios\n      aaAxios();\n    }\n    loadCoords();\n  }\n};","map":{"version":3,"names":["axios","dfs_xy_conv","URL","apiKey","process","env","REACT_APP_API_KEY","console","log","weatherapi","navigator","geolocation","saveCoords","coordsObj","localStorage","setItem","JSON","stringify","handleSuccess","position","latitude","coords","longitude","handleError","askForCoords","getCurrentPosition","loadCoords","loadedCoords","getItem","xyresult","weatherapiresult","aaAxios","get","params","serviceKey","numOfRows","pageNo","dataType","base_date","base_time","nx","x","ny","y","then","result","data","response","body","items","item","catch","e"],"sources":["C:/Users/win10/Desktop/picdiary/views/src/api/openApi.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { dfs_xy_conv } from \"../utils/xy\";\r\n\r\n//const URL = \"http://apis.data.go.kr/B551182/\";\r\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0\r\nconst URL =\r\n  \"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\";\r\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\r\n//?serviceKey=인증키&numOfRows=10&pageNo=1\r\n//&base_date=20210628&base_time=0600&nx=55&ny=127\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\nconsole.log(apiKey);\r\n\r\nexport const weatherapi = async () => {\r\n  if (navigator.geolocation) {\r\n    function saveCoords(coordsObj) {\r\n      localStorage.setItem(\"COORDS\", JSON.stringify(coordsObj));\r\n      //localstorage의 key, value 값은 모두 string 타입으로 저장되기때문에 변환시켜준다.\r\n    }\r\n\r\n    function handleSuccess(position) {\r\n      const latitude = position.coords.latitude;\r\n      const longitude = position.coords.longitude;\r\n      const coordsObj = {\r\n        // 객체의 key,  value 값이 동일할 때에는 한번만 써줘도 된다.\r\n        latitude, // localStorage에 객체로 value에 저장하기위해서 객체에 넣어준다.\r\n        longitude,\r\n      };\r\n      saveCoords(coordsObj); // localStorage에 위치 저장\r\n    }\r\n\r\n    function handleError() {\r\n      console.log(\"cant not access to location\");\r\n    }\r\n\r\n    function askForCoords() {\r\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\r\n    }\r\n\r\n    function loadCoords() {\r\n      const loadedCoords = localStorage.getItem(\"COORDS\");\r\n\r\n      if (loadedCoords === null) {\r\n        // localStorage에 좌표값이 저장되어있지않다면\r\n        askForCoords(); // 좌표값을 물어본다\r\n      }\r\n      const xyresult = dfs_xy_conv(\r\n        \"toXY\",\r\n        loadedCoords.latitude,\r\n        loadedCoords.longitude\r\n      );\r\n      var weatherapiresult = null;\r\n\r\n      console.log(\"위경도를 xy변경후 : \", xyresult);\r\n      const aaAxios = async () => {\r\n        await axios\r\n          .get(URL, {\r\n            params: {\r\n              serviceKey: apiKey,\r\n              numOfRows: 10,\r\n              pageNo: 1,\r\n              dataType: \"JSON\",\r\n              base_date: \"20250310\",\r\n              base_time: \"0600\",\r\n              nx: xyresult.x,\r\n              ny: xyresult.y,\r\n            },\r\n          })\r\n          .then((result) => {\r\n            console.log(\"openAPI axios 결과\", result);\r\n            weatherapiresult = result.data.response.body.items.item;\r\n            console.log(\"openAPI axios weatherapiresult\", weatherapiresult);\r\n            return weatherapiresult;\r\n          })\r\n          .catch((e) => {\r\n            console.log(\"openAPI axios 에러발생\", e);\r\n          });\r\n      }; //aaAxios\r\n      aaAxios();\r\n    }\r\n    loadCoords();\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA;AACA,MAAMC,GAAG,GACP,0EAA0E;AAC5E;AACA;AACA;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAC5CC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;AAEnB,OAAO,MAAMM,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAIC,SAAS,CAACC,WAAW,EAAE;IACzB,SAASC,UAAUA,CAACC,SAAS,EAAE;MAC7BC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC,CAAC;MACzD;IACF;IAEA,SAASK,aAAaA,CAACC,QAAQ,EAAE;MAC/B,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAM,CAACD,QAAQ;MACzC,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAM,CAACC,SAAS;MAC3C,MAAMT,SAAS,GAAG;QAChB;QACAO,QAAQ;QAAE;QACVE;MACF,CAAC;MACDV,UAAU,CAACC,SAAS,CAAC,CAAC,CAAC;IACzB;IAEA,SAASU,WAAWA,CAAA,EAAG;MACrBhB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C;IAEA,SAASgB,YAAYA,CAAA,EAAG;MACtBd,SAAS,CAACC,WAAW,CAACc,kBAAkB,CAACP,aAAa,EAAEK,WAAW,CAAC;IACtE;IAEA,SAASG,UAAUA,CAAA,EAAG;MACpB,MAAMC,YAAY,GAAGb,YAAY,CAACc,OAAO,CAAC,QAAQ,CAAC;MAEnD,IAAID,YAAY,KAAK,IAAI,EAAE;QACzB;QACAH,YAAY,CAAC,CAAC,CAAC,CAAC;MAClB;MACA,MAAMK,QAAQ,GAAG5B,WAAW,CAC1B,MAAM,EACN0B,YAAY,CAACP,QAAQ,EACrBO,YAAY,CAACL,SACf,CAAC;MACD,IAAIQ,gBAAgB,GAAG,IAAI;MAE3BvB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEqB,QAAQ,CAAC;MACtC,MAAME,OAAO,GAAG,MAAAA,CAAA,KAAY;QAC1B,MAAM/B,KAAK,CACRgC,GAAG,CAAC9B,GAAG,EAAE;UACR+B,MAAM,EAAE;YACNC,UAAU,EAAE/B,MAAM;YAClBgC,SAAS,EAAE,EAAE;YACbC,MAAM,EAAE,CAAC;YACTC,QAAQ,EAAE,MAAM;YAChBC,SAAS,EAAE,UAAU;YACrBC,SAAS,EAAE,MAAM;YACjBC,EAAE,EAAEX,QAAQ,CAACY,CAAC;YACdC,EAAE,EAAEb,QAAQ,CAACc;UACf;QACF,CAAC,CAAC,CACDC,IAAI,CAAEC,MAAM,IAAK;UAChBtC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEqC,MAAM,CAAC;UACvCf,gBAAgB,GAAGe,MAAM,CAACC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,IAAI;UACvD3C,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEsB,gBAAgB,CAAC;UAC/D,OAAOA,gBAAgB;QACzB,CAAC,CAAC,CACDqB,KAAK,CAAEC,CAAC,IAAK;UACZ7C,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE4C,CAAC,CAAC;QACtC,CAAC,CAAC;MACN,CAAC,CAAC,CAAC;MACHrB,OAAO,CAAC,CAAC;IACX;IACAL,UAAU,CAAC,CAAC;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}