{"ast":null,"code":"import axios from \"axios\";\nimport { dfs_xy_conv } from \"../utils/xy\";\n\n//const URL = \"http://apis.data.go.kr/B551182/\";\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0\nconst URL = \"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\";\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\n//?serviceKey=인증키&numOfRows=10&pageNo=1\n//&base_date=20210628&base_time=0600&nx=55&ny=127\n\nconst apiKey = process.env.REACT_APP_API_KEY;\nconsole.log(apiKey);\nexport const weatherapi = async () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function (pos) {\n      console.log(pos);\n      var latitude = Math.floor(pos.coords.latitude);\n      var longitude = Math.floor(pos.coords.longitude);\n      console.log(\"현재 위치는 : \" + latitude + \", \" + longitude);\n      if (latitude !== null && longitude !== null) {\n        const xyresult = dfs_xy_conv(\"toXY\", latitude, longitude);\n        console.log(\"위경도를 xy변경후 : \", xyresult);\n        const aaAxios = async () => {\n          await axios.get(URL, {\n            params: {\n              serviceKey: apiKey,\n              numOfRows: 10,\n              pageNo: 1,\n              dataType: \"JSON\",\n              base_date: \"20250310\",\n              base_time: \"0600\",\n              nx: xyresult.x,\n              ny: xyresult.y\n            }\n          }).then(result => {\n            console.log(\"openAPI axios 결과\", result);\n            return result.data.response.body.items.item;\n          }).catch(e => {\n            console.log(\"openAPI axios 에러발생\", e);\n          });\n          aaAxios();\n        };\n      } //if\n    });\n  }\n}; //weatherapi","map":{"version":3,"names":["axios","dfs_xy_conv","URL","apiKey","process","env","REACT_APP_API_KEY","console","log","weatherapi","navigator","geolocation","getCurrentPosition","pos","latitude","Math","floor","coords","longitude","xyresult","aaAxios","get","params","serviceKey","numOfRows","pageNo","dataType","base_date","base_time","nx","x","ny","y","then","result","data","response","body","items","item","catch","e"],"sources":["C:/Users/win10/Desktop/picdiary/views/src/api/openApi.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { dfs_xy_conv } from \"../utils/xy\";\r\n\r\n//const URL = \"http://apis.data.go.kr/B551182/\";\r\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0\r\nconst URL =\r\n  \"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\";\r\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\r\n//?serviceKey=인증키&numOfRows=10&pageNo=1\r\n//&base_date=20210628&base_time=0600&nx=55&ny=127\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\nconsole.log(apiKey);\r\n\r\nexport const weatherapi = async () => {\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(function (pos) {\r\n      console.log(pos);\r\n      var latitude = Math.floor(pos.coords.latitude);\r\n      var longitude = Math.floor(pos.coords.longitude);\r\n      console.log(\"현재 위치는 : \" + latitude + \", \" + longitude);\r\n\r\n      if (latitude !== null && longitude !== null) {\r\n        const xyresult = dfs_xy_conv(\"toXY\", latitude, longitude);\r\n\r\n        console.log(\"위경도를 xy변경후 : \", xyresult);\r\n\r\n        const aaAxios = async () => {\r\n          await axios\r\n            .get(URL, {\r\n              params: {\r\n                serviceKey: apiKey,\r\n                numOfRows: 10,\r\n                pageNo: 1,\r\n                dataType: \"JSON\",\r\n                base_date: \"20250310\",\r\n                base_time: \"0600\",\r\n                nx: xyresult.x,\r\n                ny: xyresult.y,\r\n              },\r\n            })\r\n            .then((result) => {\r\n              console.log(\"openAPI axios 결과\", result);\r\n              return result.data.response.body.items.item;\r\n            })\r\n            .catch((e) => {\r\n              console.log(\"openAPI axios 에러발생\", e);\r\n            });\r\n          aaAxios();\r\n        };\r\n      } //if\r\n    });\r\n  }\r\n}; //weatherapi\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA;AACA,MAAMC,GAAG,GACP,0EAA0E;AAC5E;AACA;AACA;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAC5CC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;AAEnB,OAAO,MAAMM,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAIC,SAAS,CAACC,WAAW,EAAE;IACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,UAAUC,GAAG,EAAE;MACtDN,OAAO,CAACC,GAAG,CAACK,GAAG,CAAC;MAChB,IAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAACI,MAAM,CAACH,QAAQ,CAAC;MAC9C,IAAII,SAAS,GAAGH,IAAI,CAACC,KAAK,CAACH,GAAG,CAACI,MAAM,CAACC,SAAS,CAAC;MAChDX,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGM,QAAQ,GAAG,IAAI,GAAGI,SAAS,CAAC;MAEtD,IAAIJ,QAAQ,KAAK,IAAI,IAAII,SAAS,KAAK,IAAI,EAAE;QAC3C,MAAMC,QAAQ,GAAGlB,WAAW,CAAC,MAAM,EAAEa,QAAQ,EAAEI,SAAS,CAAC;QAEzDX,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEW,QAAQ,CAAC;QAEtC,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;UAC1B,MAAMpB,KAAK,CACRqB,GAAG,CAACnB,GAAG,EAAE;YACRoB,MAAM,EAAE;cACNC,UAAU,EAAEpB,MAAM;cAClBqB,SAAS,EAAE,EAAE;cACbC,MAAM,EAAE,CAAC;cACTC,QAAQ,EAAE,MAAM;cAChBC,SAAS,EAAE,UAAU;cACrBC,SAAS,EAAE,MAAM;cACjBC,EAAE,EAAEV,QAAQ,CAACW,CAAC;cACdC,EAAE,EAAEZ,QAAQ,CAACa;YACf;UACF,CAAC,CAAC,CACDC,IAAI,CAAEC,MAAM,IAAK;YAChB3B,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE0B,MAAM,CAAC;YACvC,OAAOA,MAAM,CAACC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,IAAI;UAC7C,CAAC,CAAC,CACDC,KAAK,CAAEC,CAAC,IAAK;YACZlC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEiC,CAAC,CAAC;UACtC,CAAC,CAAC;UACJrB,OAAO,CAAC,CAAC;QACX,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}