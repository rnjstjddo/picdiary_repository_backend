{"ast":null,"code":"import axios from \"axios\";\nimport { dfs_xy_conv } from \"../utils/xy\";\n\n//const URL = \"http://apis.data.go.kr/B551182/\";\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0\nconst URL = \"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\";\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\n//?serviceKey=인증키&numOfRows=10&pageNo=1\n//&base_date=20210628&base_time=0600&nx=55&ny=127\n\nconst apiKey = process.env.REACT_APP_API_KEY;\nconsole.log(apiKey);\nconst navigatorFn = () => {\n  if (navigator.geolocation) {\n    var _loadedCoords, _loadedCoords2;\n    function saveCoords(coordsObj) {\n      localStorage.setItem(\"COORDS\", JSON.stringify(coordsObj));\n      //localstorage의 key, value 값은 모두 string 타입으로 저장되기때문에 변환시켜준다.\n    }\n    function handleSuccess(position) {\n      var _position$coords, _position$coords2;\n      const latitude = (_position$coords = position.coords) === null || _position$coords === void 0 ? void 0 : _position$coords.latitude;\n      const longitude = (_position$coords2 = position.coords) === null || _position$coords2 === void 0 ? void 0 : _position$coords2.longitude;\n      const coordsObj = {\n        // 객체의 key,  value 값이 동일할 때에는 한번만 써줘도 된다.\n        latitude,\n        // localStorage에 객체로 value에 저장하기위해서 객체에 넣어준다.\n        longitude\n      };\n      saveCoords(coordsObj); // localStorage에 위치 저장\n    }\n    function handleError() {\n      console.log(\"cant not access to location\");\n    }\n    function askForCoords() {\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\n    }\n    let loadedCoords = localStorage.getItem(\"COORDS\");\n    console.log(\"loadCoords 로컬저장소에서 저장된 위도경도 가져오기 : \", JSON.stringify(loadedCoords));\n    loadedCoords = JSON.parse(loadedCoords);\n    if (loadedCoords === null) {\n      // localStorage에 좌표값이 저장되어있지않다면\n      askForCoords(); // 좌표값을 물어본다\n    }\n    const xyresult = dfs_xy_conv(\"toXY\", Number((_loadedCoords = loadedCoords) === null || _loadedCoords === void 0 ? void 0 : _loadedCoords.latitude), Number((_loadedCoords2 = loadedCoords) === null || _loadedCoords2 === void 0 ? void 0 : _loadedCoords2.longitude));\n    return xyresult;\n  } //if\n}; //navigatorFn\n\nexport const weatherapi = async ({\n  weatherDate,\n  weatherTime\n}) => {\n  // const {  } = params;\n\n  var weatherapiresult = null;\n  const xyresult = navigatorFn();\n  console.log(\"weatherapi() 내 위경도를 xy변경후 : \", xyresult);\n  console.log(\"weatherapi() 내 weatherDate 확인 ->  \", weatherDate);\n  console.log(\"weatherapi() 내 weatherTime 확인 ->  : \", weatherTime);\n  try {\n    var _result$data, _result$data$response, _result$data$response2, _result$data$response3;\n    const result = await axios.get(URL, {\n      params: {\n        serviceKey: apiKey,\n        numOfRows: 10,\n        pageNo: 1,\n        dataType: \"JSON\",\n        base_date: weatherDate,\n        base_time: weatherTime,\n        nx: xyresult.x,\n        ny: xyresult.y\n      }\n    });\n    weatherapiresult = result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$response = _result$data.response) === null || _result$data$response === void 0 ? void 0 : (_result$data$response2 = _result$data$response.body) === null || _result$data$response2 === void 0 ? void 0 : (_result$data$response3 = _result$data$response2.items) === null || _result$data$response3 === void 0 ? void 0 : _result$data$response3.item;\n    console.log(\"openAPI axios 결과 \", weatherapiresult);\n    return weatherapiresult;\n  } catch (e) {\n    console.log(\"openAPI axios 에러발생\", e);\n  }\n}; //weatherapi","map":{"version":3,"names":["axios","dfs_xy_conv","URL","apiKey","process","env","REACT_APP_API_KEY","console","log","navigatorFn","navigator","geolocation","_loadedCoords","_loadedCoords2","saveCoords","coordsObj","localStorage","setItem","JSON","stringify","handleSuccess","position","_position$coords","_position$coords2","latitude","coords","longitude","handleError","askForCoords","getCurrentPosition","loadedCoords","getItem","parse","xyresult","Number","weatherapi","weatherDate","weatherTime","weatherapiresult","_result$data","_result$data$response","_result$data$response2","_result$data$response3","result","get","params","serviceKey","numOfRows","pageNo","dataType","base_date","base_time","nx","x","ny","y","data","response","body","items","item","e"],"sources":["C:/Users/win10/Desktop/picdiary/views/src/api/openApi.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { dfs_xy_conv } from \"../utils/xy\";\r\n\r\n//const URL = \"http://apis.data.go.kr/B551182/\";\r\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0\r\nconst URL =\r\n  \"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\";\r\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\r\n//?serviceKey=인증키&numOfRows=10&pageNo=1\r\n//&base_date=20210628&base_time=0600&nx=55&ny=127\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\nconsole.log(apiKey);\r\n\r\nconst navigatorFn = () => {\r\n  if (navigator.geolocation) {\r\n    function saveCoords(coordsObj) {\r\n      localStorage.setItem(\"COORDS\", JSON.stringify(coordsObj));\r\n      //localstorage의 key, value 값은 모두 string 타입으로 저장되기때문에 변환시켜준다.\r\n    }\r\n\r\n    function handleSuccess(position) {\r\n      const latitude = position.coords?.latitude;\r\n      const longitude = position.coords?.longitude;\r\n      const coordsObj = {\r\n        // 객체의 key,  value 값이 동일할 때에는 한번만 써줘도 된다.\r\n        latitude, // localStorage에 객체로 value에 저장하기위해서 객체에 넣어준다.\r\n        longitude,\r\n      };\r\n      saveCoords(coordsObj); // localStorage에 위치 저장\r\n    }\r\n\r\n    function handleError() {\r\n      console.log(\"cant not access to location\");\r\n    }\r\n\r\n    function askForCoords() {\r\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\r\n    }\r\n\r\n    let loadedCoords = localStorage.getItem(\"COORDS\");\r\n    console.log(\r\n      \"loadCoords 로컬저장소에서 저장된 위도경도 가져오기 : \",\r\n      JSON.stringify(loadedCoords)\r\n    );\r\n    loadedCoords = JSON.parse(loadedCoords);\r\n\r\n    if (loadedCoords === null) {\r\n      // localStorage에 좌표값이 저장되어있지않다면\r\n      askForCoords(); // 좌표값을 물어본다\r\n    }\r\n    const xyresult = dfs_xy_conv(\r\n      \"toXY\",\r\n      Number(loadedCoords?.latitude),\r\n      Number(loadedCoords?.longitude)\r\n    );\r\n    return xyresult;\r\n  } //if\r\n}; //navigatorFn\r\n\r\nexport const weatherapi = async ({ weatherDate, weatherTime }) => {\r\n  // const {  } = params;\r\n\r\n  var weatherapiresult = null;\r\n\r\n  const xyresult = navigatorFn();\r\n  console.log(\"weatherapi() 내 위경도를 xy변경후 : \", xyresult);\r\n  console.log(\"weatherapi() 내 weatherDate 확인 ->  \", weatherDate);\r\n  console.log(\"weatherapi() 내 weatherTime 확인 ->  : \", weatherTime);\r\n  try {\r\n    const result = await axios.get(URL, {\r\n      params: {\r\n        serviceKey: apiKey,\r\n        numOfRows: 10,\r\n        pageNo: 1,\r\n        dataType: \"JSON\",\r\n        base_date: weatherDate,\r\n        base_time: weatherTime,\r\n        nx: xyresult.x,\r\n        ny: xyresult.y,\r\n      },\r\n    });\r\n    weatherapiresult = result?.data?.response?.body?.items?.item;\r\n    console.log(\"openAPI axios 결과 \", weatherapiresult);\r\n    return weatherapiresult;\r\n  } catch (e) {\r\n    console.log(\"openAPI axios 에러발생\", e);\r\n  }\r\n}; //weatherapi\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}