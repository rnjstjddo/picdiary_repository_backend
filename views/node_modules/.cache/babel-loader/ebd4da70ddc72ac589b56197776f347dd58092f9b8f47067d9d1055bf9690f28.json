{"ast":null,"code":"import axios from\"axios\";import{getCookie,setCookie}from\"./cookieUtil\";import{API_SERVER_HOST}from\"../api/memberApi\";const jwtAxios=axios.create();//jwt 재발급\nconst refreshJWT=async(refreshToken,accessToken)=>{const host=API_SERVER_HOST;console.log(\"jwtUtil.js refreshJWT진입 \");const header={headers:{Authorization:`Bearer ${accessToken}`}};try{const res=await axios.get(`${host}/api/member/refreshToken?refreshToken=${refreshToken}`,header);console.log(\"jwtUtil.js refreshJWT진입 axios 결과 -> \",res);return res.data;}catch(err){console.log(\"jwtUtil.js refreshJWT진입 catch() -> \",err);//    if (err.response.data.name === \"TokenExpiredError\") {\nif(err.response.data.error===\"ERROR_REFRESH_TOKEN\"){return Promise.reject({response:{data:{error:\"REQUIRE_LOGIN\"}}});}}};const beforeReq=config=>{//요청전에 jwt추가\n//const memberInfo = getCookie(\"member\");\n// if (!memberInfo) {\n//   return Promise.reject({ response: { data: { error: \"REQUIRE_LOGIN\" } } });\n// }\n// const { accessToken } = memberInfo;\nconsole.log(\"jwtUtil.js beforeReq() 매개변수config.url=> \",config.url);//const result =\n//config.url === \"http://localhost:8001/api/diary\" ? true : false;\n// console.log(\"jwtUtil.js beforeReq() 결과\", result);\n//if (result) {\nconst accessToken=getCookie(\"accessToken\");console.log(\"jwtUtil.js beforeReq() 내 쿠키에 저장된 accessToken 꺼냄 => \",accessToken);config.headers.Authorization=`Bearer ${accessToken}`;return config;//  } else {\n//   console.log(\n//     \"jwtUtil.js beforeReq() 매개변수 엑세스토큰 헤더에 넣지않음 config.url=> \",\n//     config.url\n//   );\n//   return config;\n// }\n};const requestFail=err=>{console.log(\"jwtUtil.js requestFail() 진입 err->  \",err);return Promise.reject(err);};const beforeRes=async res=>{console.log(\"jwtUtil.js beforeRes() 진입 res ->  \",res);//  const data = res.data;\n//const accessToken = res.headers.Authorization.accessToken;\n//const accessToken = res.data.accessToken;\n//console.log(\"cookieUtil.js beforeRes() 받은 accessToken ->\", accessToken);\n//setCookie(\"accessToken\", accessToken);\n//if (data && data.error === \"ERROR_ACCESS_TOKEN\") {\n// if (\n//   res.response.data.error === \"ERROR_ACCESS_TOKEN\" ||\n//   res.response.data.error === \"EXPIRED_ACCESS_TOKEN\"\n// ) {\n//   console.log(\"cookieUtil.js beforeRes 함수에서 error발생시 토큰재발행 \");\n//   const memberCookieValue = getCookie(\"member\");\n//   // console.log(\n//   //   \"jwtUtil.js beforeRes함수에서 member쿠키 저장내용확인 -> \",\n//   //   memberCookieValue\n//   // );\n//   const result = await refreshJWT(memberCookieValue.refreshToken); //새로발급\n//   setCookie(\"member\", JSON.stringify(memberCookieValue), 1);\n//   //원래호출\n//   const originalRequest = res.config;\n//   originalRequest.headers.Authorization = `Bearer ${result.accessToken}`;\n//   return await axios(originalRequest);\n// }\nreturn res;};const responseFail=async err=>{console.log(\"jwtUtil.js responseFail() 진입 err->  \",err);if(err.status===419||err.code===\"ERR_BAD_REQUEST\"||err.response.data.error===\"ERROR_ACCESS_TOKEN\"||err.response.data.error===\"EXPIRED_ACCESS_TOKEN\"){console.log(\"jwtUtil.js responseFail() 진입 엑세스토큰 재발급진입\");const memberCookieValue=getCookie(\"member\");console.log(\"jwtUtil.js responseFail() 진입 member쿠키가져오기-> \",memberCookieValue);if(memberCookieValue&&memberCookieValue.user.refreshtoken){const refreshtoken=memberCookieValue.user.refreshtoken;//member쿠키있다면\nconsole.log(\"jwtUtil.js responseFail() 진입 member쿠키에서 refreshtoken 가져오기-> \",refreshtoken);const accessToken=getCookie(\"accessToken\");const result=await refreshJWT(refreshtoken,accessToken);//새로발급\nconsole.log(\"jwtUtil.js responseFail() 진입 refreshJWT() ->  \",result);setCookie(\"member\",JSON.stringify(result),1);//원래호출\nconst originalRequest=err.config;originalRequest.headers.Authorization=`Bearer ${result.accessToken}`;return await axios(originalRequest);}else{//member쿠키없다면\nconsole.log(\"jwtUtil.js responseFail() 진입 err ->  \",err);return Promise.reject(err);}}if(err.response.data.error===\"ERROR_REFRESH_TOKEN\"){return Promise.reject(err);}if(err.message===\"Network Error\"||err.name===\"AxiosError\"){return Promise.reject(err);}};jwtAxios.interceptors.request.use(beforeReq,requestFail);jwtAxios.interceptors.response.use(beforeRes,responseFail);export default jwtAxios;","map":{"version":3,"names":["axios","getCookie","setCookie","API_SERVER_HOST","jwtAxios","create","refreshJWT","refreshToken","accessToken","host","console","log","header","headers","Authorization","res","get","data","err","response","error","Promise","reject","beforeReq","config","url","requestFail","beforeRes","responseFail","status","code","memberCookieValue","user","refreshtoken","result","JSON","stringify","originalRequest","message","name","interceptors","request","use"],"sources":["C:/Users/win10/Desktop/picdiary/views/src/util/jwtUtil.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\nimport { API_SERVER_HOST } from \"../api/memberApi\";\r\n\r\nconst jwtAxios = axios.create();\r\n\r\n//jwt 재발급\r\nconst refreshJWT = async (refreshToken, accessToken) => {\r\n  const host = API_SERVER_HOST;\r\n\r\n  console.log(\"jwtUtil.js refreshJWT진입 \");\r\n\r\n  const header = { headers: { Authorization: `Bearer ${accessToken}` } };\r\n\r\n  try {\r\n    const res = await axios.get(\r\n      `${host}/api/member/refreshToken?refreshToken=${refreshToken}`,\r\n      header\r\n    );\r\n    console.log(\"jwtUtil.js refreshJWT진입 axios 결과 -> \", res);\r\n    return res.data;\r\n  } catch (err) {\r\n    console.log(\"jwtUtil.js refreshJWT진입 catch() -> \", err);\r\n    //    if (err.response.data.name === \"TokenExpiredError\") {\r\n    if (err.response.data.error === \"ERROR_REFRESH_TOKEN\") {\r\n      return Promise.reject({ response: { data: { error: \"REQUIRE_LOGIN\" } } });\r\n    }\r\n  }\r\n};\r\n\r\nconst beforeReq = (config) => {\r\n  //요청전에 jwt추가\r\n  //const memberInfo = getCookie(\"member\");\r\n  // if (!memberInfo) {\r\n  //   return Promise.reject({ response: { data: { error: \"REQUIRE_LOGIN\" } } });\r\n  // }\r\n  // const { accessToken } = memberInfo;\r\n\r\n  console.log(\"jwtUtil.js beforeReq() 매개변수config.url=> \", config.url);\r\n  //const result =\r\n  //config.url === \"http://localhost:8001/api/diary\" ? true : false;\r\n\r\n  // console.log(\"jwtUtil.js beforeReq() 결과\", result);\r\n  //if (result) {\r\n  const accessToken = getCookie(\"accessToken\");\r\n  console.log(\r\n    \"jwtUtil.js beforeReq() 내 쿠키에 저장된 accessToken 꺼냄 => \",\r\n    accessToken\r\n  );\r\n  config.headers.Authorization = `Bearer ${accessToken}`;\r\n\r\n  return config;\r\n  //  } else {\r\n  //   console.log(\r\n  //     \"jwtUtil.js beforeReq() 매개변수 엑세스토큰 헤더에 넣지않음 config.url=> \",\r\n  //     config.url\r\n  //   );\r\n\r\n  //   return config;\r\n  // }\r\n};\r\n\r\nconst requestFail = (err) => {\r\n  console.log(\"jwtUtil.js requestFail() 진입 err->  \", err);\r\n\r\n  return Promise.reject(err);\r\n};\r\n\r\nconst beforeRes = async (res) => {\r\n  console.log(\"jwtUtil.js beforeRes() 진입 res ->  \", res);\r\n\r\n  //  const data = res.data;\r\n  //const accessToken = res.headers.Authorization.accessToken;\r\n  //const accessToken = res.data.accessToken;\r\n\r\n  //console.log(\"cookieUtil.js beforeRes() 받은 accessToken ->\", accessToken);\r\n  //setCookie(\"accessToken\", accessToken);\r\n  //if (data && data.error === \"ERROR_ACCESS_TOKEN\") {\r\n  // if (\r\n  //   res.response.data.error === \"ERROR_ACCESS_TOKEN\" ||\r\n  //   res.response.data.error === \"EXPIRED_ACCESS_TOKEN\"\r\n  // ) {\r\n  //   console.log(\"cookieUtil.js beforeRes 함수에서 error발생시 토큰재발행 \");\r\n\r\n  //   const memberCookieValue = getCookie(\"member\");\r\n  //   // console.log(\r\n  //   //   \"jwtUtil.js beforeRes함수에서 member쿠키 저장내용확인 -> \",\r\n  //   //   memberCookieValue\r\n  //   // );\r\n  //   const result = await refreshJWT(memberCookieValue.refreshToken); //새로발급\r\n\r\n  //   setCookie(\"member\", JSON.stringify(memberCookieValue), 1);\r\n\r\n  //   //원래호출\r\n  //   const originalRequest = res.config;\r\n  //   originalRequest.headers.Authorization = `Bearer ${result.accessToken}`;\r\n  //   return await axios(originalRequest);\r\n  // }\r\n  return res;\r\n};\r\n\r\nconst responseFail = async (err) => {\r\n  console.log(\"jwtUtil.js responseFail() 진입 err->  \", err);\r\n\r\n  if (\r\n    err.status === 419 ||\r\n    err.code === \"ERR_BAD_REQUEST\" ||\r\n    err.response.data.error === \"ERROR_ACCESS_TOKEN\" ||\r\n    err.response.data.error === \"EXPIRED_ACCESS_TOKEN\"\r\n  ) {\r\n    console.log(\"jwtUtil.js responseFail() 진입 엑세스토큰 재발급진입\");\r\n\r\n    const memberCookieValue = getCookie(\"member\");\r\n    console.log(\r\n      \"jwtUtil.js responseFail() 진입 member쿠키가져오기-> \",\r\n      memberCookieValue\r\n    );\r\n\r\n    if (memberCookieValue && memberCookieValue.user.refreshtoken) {\r\n      const refreshtoken = memberCookieValue.user.refreshtoken;\r\n      //member쿠키있다면\r\n      console.log(\r\n        \"jwtUtil.js responseFail() 진입 member쿠키에서 refreshtoken 가져오기-> \",\r\n        refreshtoken\r\n      );\r\n      const accessToken = getCookie(\"accessToken\");\r\n\r\n      const result = await refreshJWT(refreshtoken, accessToken); //새로발급\r\n\r\n      console.log(\"jwtUtil.js responseFail() 진입 refreshJWT() ->  \", result);\r\n\r\n      setCookie(\"member\", JSON.stringify(result), 1);\r\n\r\n      //원래호출\r\n      const originalRequest = err.config;\r\n      originalRequest.headers.Authorization = `Bearer ${result.accessToken}`;\r\n      return await axios(originalRequest);\r\n    } else {\r\n      //member쿠키없다면\r\n      console.log(\"jwtUtil.js responseFail() 진입 err ->  \", err);\r\n\r\n      return Promise.reject(err);\r\n    }\r\n  }\r\n\r\n  if (err.response.data.error === \"ERROR_REFRESH_TOKEN\") {\r\n    return Promise.reject(err);\r\n  }\r\n  if (err.message === \"Network Error\" || err.name === \"AxiosError\") {\r\n    return Promise.reject(err);\r\n  }\r\n};\r\n\r\njwtAxios.interceptors.request.use(beforeReq, requestFail);\r\njwtAxios.interceptors.response.use(beforeRes, responseFail);\r\n\r\nexport default jwtAxios;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}