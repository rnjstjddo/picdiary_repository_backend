{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { joinPost, loginPost, logoutGet, forSession } from \"../api/memberApi\";\nimport { getCookie, removeCookie, setCookie } from \"../util/cookieUtil\";\nconst initState = {\n  email: \"\"\n};\n\n//애플리케이션 로딩시 쿠키값가져오기\nconst loadMemberCookie = () => {\n  const memberInfo = getCookie(\"member\");\n  console.log(\"loginSlice.js loadMemberCookie() 진입 애플리케이션로딩시 member 이름 쿠키가져옴 -> \", memberInfo);\n  const accessToken = getCookie(\"accessToken\");\n  if (memberInfo) {\n    // if (memberInfo && memberInfo.nickname) {\n    //   memberInfo.nickname = decodeURIComponent(memberInfo.nickname);\n    // }\n    return memberInfo.user.email;\n  }\n  return {\n    ...initState\n  };\n};\n\n//비동기 세션생성위해 로그인후 재요청\nexport const forSessionAsync = createAsyncThunk(\"forSessionAsync\", param => {\n  return forSession(param);\n});\n\n//비동기 로그인\nexport const loginPostAsync = createAsyncThunk(\"loginPostAsync\", param => {\n  return loginPost(param);\n});\n\n//비동기 회원가입\nexport const joinPostAsync = createAsyncThunk(\"joinPostAsync\", param => {\n  return joinPost(param);\n});\n\n//비동기 로그아웃\nexport const logoutGetAsync = createAsyncThunk(\"logoutGetAsync\", () => {\n  return logoutGet();\n});\nconst loginSlice = createSlice({\n  name: \"loginSlice\",\n  initialState: loadMemberCookie() || initState,\n  // initialState: initState,\n\n  reducers: {\n    // login: (state, action) => {\n    //   const data = action.payload;\n    //   console.log(\n    //     \"loginSlice에서 login액션함수에서 axios 후 결과 payload담긴값 확인 => \",\n    //     data\n    //   );\n    //   //쿠키담기\n    //   //setCookie(\"member\", JSON.stringify(data), 1);\n    //   //return data;\n    //   return { email: data };\n    // },\n    //  logout: (state, action) => {\n    //removeCookie(\"member\");\n    //  console.log(\n    //  \"loginSlice에서 logout 액션함수에서 axios 후 결과 payload담긴값 확인 => \",\n    //action.payload\n    //);\n    //return { ...initState };\n    //},\n    // join: (state, action) => {\n    //   const data = action.payload;\n    //   return data;\n    // },\n  },\n  //비동기\n  extraReducers: builder => {\n    builder.addCase(loginPostAsync.fulfilled, (state, action) => {\n      const payload = action.payload;\n      console.log(\"loginSlice에서 loginPostAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \", payload);\n      console.log(\"loginSlice에서 loginPostAsync 리듀서함수에서 fulfilled 진입 리듀서의 state => \", state);\n\n      //쿠키담기\n      if (!payload.error) {\n        setCookie(\"member\", JSON.stringify(payload), 1);\n      }\n      return payload.user.email; //상태변경\n    }).addCase(loginPostAsync.pending, (state, action) => {}).addCase(loginPostAsync.rejected, (state, action) => {\n      console.log(\"loginSlice에서 loginPostAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \", action.payload);\n    }).addCase(joinPostAsync.fulfilled, (state, action) => {\n      const payload = action.payload;\n      console.log(\"loginSlice에서 joinPostAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \", payload);\n      //return payload;\n    }).addCase(joinPostAsync.pending, (state, action) => {\n      console.log(\"loginSlice에서 joinPostAsync 리듀서함수에서 pending 진입 payload담긴값 확인 => \", action);\n    }).addCase(joinPostAsync.rejected, (state, action) => {\n      const payload = action.payload;\n      console.log(\"loginSlice에서 joinPostAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \", payload);\n    }).addCase(logoutGetAsync.fulfilled, (state, action) => {\n      const payload = action.payload;\n      console.log(\"loginSlice에서 logoutGetAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \", payload);\n      removeCookie(\"member\");\n      removeCookie(\"accessToken\");\n      return {\n        ...initState\n      };\n    }).addCase(logoutGetAsync.pending, (state, action) => {}).addCase(logoutGetAsync.rejected, (state, action) => {\n      const payload = action.payload;\n      console.log(\"loginSlice에서 logoutGetAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \", payload);\n    }).addCase(forSessionAsync.fulfilled, (state, action) => {\n      const payload = action.payload;\n      console.log(\"loginSlice에서 forSessionAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \", payload);\n      return payload;\n    }).addCase(forSessionAsync.pending, (state, action) => {}).addCase(forSessionAsync.rejected, (state, action) => {\n      const payload = action.payload;\n      console.log(\"loginSlice에서 forSessionAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \", payload);\n    });\n  }\n});\nexport const {\n  login,\n  logout,\n  join\n} = loginSlice.actions;\nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","joinPost","loginPost","logoutGet","forSession","getCookie","removeCookie","setCookie","initState","email","loadMemberCookie","memberInfo","console","log","accessToken","user","forSessionAsync","param","loginPostAsync","joinPostAsync","logoutGetAsync","loginSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","error","JSON","stringify","pending","rejected","login","logout","join","actions","reducer"],"sources":["C:/Users/win10/Desktop/picdiary/views/src/slices/loginSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { joinPost, loginPost, logoutGet, forSession } from \"../api/memberApi\";\r\nimport { getCookie, removeCookie, setCookie } from \"../util/cookieUtil\";\r\n\r\nconst initState = {\r\n  email: \"\",\r\n};\r\n\r\n//애플리케이션 로딩시 쿠키값가져오기\r\nconst loadMemberCookie = () => {\r\n  const memberInfo = getCookie(\"member\");\r\n  console.log(\r\n    \"loginSlice.js loadMemberCookie() 진입 애플리케이션로딩시 member 이름 쿠키가져옴 -> \",\r\n    memberInfo\r\n  );\r\n  const accessToken = getCookie(\"accessToken\");\r\n\r\n  if (memberInfo) {\r\n    // if (memberInfo && memberInfo.nickname) {\r\n    //   memberInfo.nickname = decodeURIComponent(memberInfo.nickname);\r\n    // }\r\n    return memberInfo.user.email;\r\n  }\r\n  return { ...initState };\r\n};\r\n\r\n//비동기 세션생성위해 로그인후 재요청\r\nexport const forSessionAsync = createAsyncThunk(\"forSessionAsync\", (param) => {\r\n  return forSession(param);\r\n});\r\n\r\n//비동기 로그인\r\nexport const loginPostAsync = createAsyncThunk(\"loginPostAsync\", (param) => {\r\n  return loginPost(param);\r\n});\r\n\r\n//비동기 회원가입\r\nexport const joinPostAsync = createAsyncThunk(\"joinPostAsync\", (param) => {\r\n  return joinPost(param);\r\n});\r\n\r\n//비동기 로그아웃\r\nexport const logoutGetAsync = createAsyncThunk(\"logoutGetAsync\", () => {\r\n  return logoutGet();\r\n});\r\n\r\nconst loginSlice = createSlice({\r\n  name: \"loginSlice\",\r\n  initialState: loadMemberCookie() || initState,\r\n  // initialState: initState,\r\n\r\n  reducers: {\r\n    // login: (state, action) => {\r\n    //   const data = action.payload;\r\n    //   console.log(\r\n    //     \"loginSlice에서 login액션함수에서 axios 후 결과 payload담긴값 확인 => \",\r\n    //     data\r\n    //   );\r\n    //   //쿠키담기\r\n    //   //setCookie(\"member\", JSON.stringify(data), 1);\r\n    //   //return data;\r\n    //   return { email: data };\r\n    // },\r\n    //  logout: (state, action) => {\r\n    //removeCookie(\"member\");\r\n    //  console.log(\r\n    //  \"loginSlice에서 logout 액션함수에서 axios 후 결과 payload담긴값 확인 => \",\r\n    //action.payload\r\n    //);\r\n    //return { ...initState };\r\n    //},\r\n    // join: (state, action) => {\r\n    //   const data = action.payload;\r\n    //   return data;\r\n    // },\r\n  },\r\n  //비동기\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginPostAsync.fulfilled, (state, action) => {\r\n        const payload = action.payload;\r\n        console.log(\r\n          \"loginSlice에서 loginPostAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n        console.log(\r\n          \"loginSlice에서 loginPostAsync 리듀서함수에서 fulfilled 진입 리듀서의 state => \",\r\n          state\r\n        );\r\n\r\n        //쿠키담기\r\n        if (!payload.error) {\r\n          setCookie(\"member\", JSON.stringify(payload), 1);\r\n        }\r\n        return payload.user.email; //상태변경\r\n      })\r\n      .addCase(loginPostAsync.pending, (state, action) => {})\r\n      .addCase(loginPostAsync.rejected, (state, action) => {\r\n        console.log(\r\n          \"loginSlice에서 loginPostAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",\r\n          action.payload\r\n        );\r\n      })\r\n      .addCase(joinPostAsync.fulfilled, (state, action) => {\r\n        const payload = action.payload;\r\n\r\n        console.log(\r\n          \"loginSlice에서 joinPostAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n        //return payload;\r\n      })\r\n      .addCase(joinPostAsync.pending, (state, action) => {\r\n        console.log(\r\n          \"loginSlice에서 joinPostAsync 리듀서함수에서 pending 진입 payload담긴값 확인 => \",\r\n          action\r\n        );\r\n      })\r\n      .addCase(joinPostAsync.rejected, (state, action) => {\r\n        const payload = action.payload;\r\n        console.log(\r\n          \"loginSlice에서 joinPostAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n      })\r\n      .addCase(logoutGetAsync.fulfilled, (state, action) => {\r\n        const payload = action.payload;\r\n\r\n        console.log(\r\n          \"loginSlice에서 logoutGetAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n        removeCookie(\"member\");\r\n        removeCookie(\"accessToken\");\r\n\r\n        return { ...initState };\r\n      })\r\n      .addCase(logoutGetAsync.pending, (state, action) => {})\r\n      .addCase(logoutGetAsync.rejected, (state, action) => {\r\n        const payload = action.payload;\r\n        console.log(\r\n          \"loginSlice에서 logoutGetAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n      })\r\n      .addCase(forSessionAsync.fulfilled, (state, action) => {\r\n        const payload = action.payload;\r\n        console.log(\r\n          \"loginSlice에서 forSessionAsync 리듀서함수에서 fulfilled 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n        return payload;\r\n      })\r\n      .addCase(forSessionAsync.pending, (state, action) => {})\r\n      .addCase(forSessionAsync.rejected, (state, action) => {\r\n        const payload = action.payload;\r\n        console.log(\r\n          \"loginSlice에서 forSessionAsync 리듀서함수에서 rejected 진입 payload담긴값 확인 => \",\r\n          payload\r\n        );\r\n      });\r\n  },\r\n});\r\n\r\nexport const { login, logout, join } = loginSlice.actions;\r\n\r\nexport default loginSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}