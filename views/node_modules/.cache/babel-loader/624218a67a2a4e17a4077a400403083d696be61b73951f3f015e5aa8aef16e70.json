{"ast":null,"code":"import axios from\"axios\";import{dfs_xy_conv}from\"../utils/xy\";//const URL = \"http://apis.data.go.kr/B551182/\";\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0\nconst URL=\"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\";//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\n//?serviceKey=인증키&numOfRows=10&pageNo=1\n//&base_date=20210628&base_time=0600&nx=55&ny=127\nconst apiKey=process.env.REACT_APP_API_KEY;console.log(apiKey);const navigatorFn=()=>{if(navigator.geolocation){var _loadedCoords,_loadedCoords2;function saveCoords(coordsObj){localStorage.setItem(\"COORDS\",JSON.stringify(coordsObj));//localstorage의 key, value 값은 모두 string 타입으로 저장되기때문에 변환시켜준다.\n}function handleSuccess(position){var _position$coords,_position$coords2;const latitude=(_position$coords=position.coords)===null||_position$coords===void 0?void 0:_position$coords.latitude;const longitude=(_position$coords2=position.coords)===null||_position$coords2===void 0?void 0:_position$coords2.longitude;const coordsObj={// 객체의 key,  value 값이 동일할 때에는 한번만 써줘도 된다.\nlatitude,// localStorage에 객체로 value에 저장하기위해서 객체에 넣어준다.\nlongitude};saveCoords(coordsObj);// localStorage에 위치 저장\n}function handleError(){console.log(\"cant not access to location\");}function askForCoords(){navigator.geolocation.getCurrentPosition(handleSuccess,handleError);}let loadedCoords=localStorage.getItem(\"COORDS\");console.log(\"loadCoords 로컬저장소에서 저장된 위도경도 가져오기 : \",JSON.stringify(loadedCoords));loadedCoords=JSON.parse(loadedCoords);if(loadedCoords===null){// localStorage에 좌표값이 저장되어있지않다면\naskForCoords();// 좌표값을 물어본다\n}const xyresult=dfs_xy_conv(\"toXY\",Number((_loadedCoords=loadedCoords)===null||_loadedCoords===void 0?void 0:_loadedCoords.latitude),Number((_loadedCoords2=loadedCoords)===null||_loadedCoords2===void 0?void 0:_loadedCoords2.longitude));return xyresult;}//if\n};//navigatorFn\nexport const weatherapi=async _ref=>{let{weatherDate,weatherTime}=_ref;// const {  } = params;\nvar weatherapiresult=null;const xyresult=navigatorFn();console.log(\"weatherapi() 내 위경도를 xy변경후 : \",xyresult);console.log(\"weatherapi() 내 weatherDate 확인 ->  \",weatherDate);console.log(\"weatherapi() 내 weatherTime 확인 ->  : \",weatherTime);try{var _result$data,_result$data$response,_result$data$response2,_result$data$response3;const result=await axios.get(URL,{params:{serviceKey:apiKey,numOfRows:10,pageNo:1,dataType:\"JSON\",base_date:weatherDate,base_time:weatherTime,nx:xyresult.x,ny:xyresult.y}});weatherapiresult=result===null||result===void 0?void 0:(_result$data=result.data)===null||_result$data===void 0?void 0:(_result$data$response=_result$data.response)===null||_result$data$response===void 0?void 0:(_result$data$response2=_result$data$response.body)===null||_result$data$response2===void 0?void 0:(_result$data$response3=_result$data$response2.items)===null||_result$data$response3===void 0?void 0:_result$data$response3.item;console.log(\"openAPI axios 결과 \",weatherapiresult);return weatherapiresult;}catch(e){console.log(\"openAPI axios 에러발생\",e);}};//weatherapi","map":{"version":3,"names":["axios","dfs_xy_conv","URL","apiKey","process","env","REACT_APP_API_KEY","console","log","navigatorFn","navigator","geolocation","_loadedCoords","_loadedCoords2","saveCoords","coordsObj","localStorage","setItem","JSON","stringify","handleSuccess","position","_position$coords","_position$coords2","latitude","coords","longitude","handleError","askForCoords","getCurrentPosition","loadedCoords","getItem","parse","xyresult","Number","weatherapi","_ref","weatherDate","weatherTime","weatherapiresult","_result$data","_result$data$response","_result$data$response2","_result$data$response3","result","get","params","serviceKey","numOfRows","pageNo","dataType","base_date","base_time","nx","x","ny","y","data","response","body","items","item","e"],"sources":["C:/Users/win10/Desktop/picdiary/views/src/api/openApi.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { dfs_xy_conv } from \"../utils/xy\";\r\n\r\n//const URL = \"http://apis.data.go.kr/B551182/\";\r\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0\r\nconst URL =\r\n  \"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\";\r\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\r\n//?serviceKey=인증키&numOfRows=10&pageNo=1\r\n//&base_date=20210628&base_time=0600&nx=55&ny=127\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\nconsole.log(apiKey);\r\n\r\nconst navigatorFn = () => {\r\n  if (navigator.geolocation) {\r\n    function saveCoords(coordsObj) {\r\n      localStorage.setItem(\"COORDS\", JSON.stringify(coordsObj));\r\n      //localstorage의 key, value 값은 모두 string 타입으로 저장되기때문에 변환시켜준다.\r\n    }\r\n\r\n    function handleSuccess(position) {\r\n      const latitude = position.coords?.latitude;\r\n      const longitude = position.coords?.longitude;\r\n      const coordsObj = {\r\n        // 객체의 key,  value 값이 동일할 때에는 한번만 써줘도 된다.\r\n        latitude, // localStorage에 객체로 value에 저장하기위해서 객체에 넣어준다.\r\n        longitude,\r\n      };\r\n      saveCoords(coordsObj); // localStorage에 위치 저장\r\n    }\r\n\r\n    function handleError() {\r\n      console.log(\"cant not access to location\");\r\n    }\r\n\r\n    function askForCoords() {\r\n      navigator.geolocation.getCurrentPosition(handleSuccess, handleError);\r\n    }\r\n\r\n    let loadedCoords = localStorage.getItem(\"COORDS\");\r\n    console.log(\r\n      \"loadCoords 로컬저장소에서 저장된 위도경도 가져오기 : \",\r\n      JSON.stringify(loadedCoords)\r\n    );\r\n    loadedCoords = JSON.parse(loadedCoords);\r\n\r\n    if (loadedCoords === null) {\r\n      // localStorage에 좌표값이 저장되어있지않다면\r\n      askForCoords(); // 좌표값을 물어본다\r\n    }\r\n    const xyresult = dfs_xy_conv(\r\n      \"toXY\",\r\n      Number(loadedCoords?.latitude),\r\n      Number(loadedCoords?.longitude)\r\n    );\r\n    return xyresult;\r\n  } //if\r\n}; //navigatorFn\r\n\r\nexport const weatherapi = async ({ weatherDate, weatherTime }) => {\r\n  // const {  } = params;\r\n\r\n  var weatherapiresult = null;\r\n\r\n  const xyresult = navigatorFn();\r\n  console.log(\"weatherapi() 내 위경도를 xy변경후 : \", xyresult);\r\n  console.log(\"weatherapi() 내 weatherDate 확인 ->  \", weatherDate);\r\n  console.log(\"weatherapi() 내 weatherTime 확인 ->  : \", weatherTime);\r\n  try {\r\n    const result = await axios.get(URL, {\r\n      params: {\r\n        serviceKey: apiKey,\r\n        numOfRows: 10,\r\n        pageNo: 1,\r\n        dataType: \"JSON\",\r\n        base_date: weatherDate,\r\n        base_time: weatherTime,\r\n        nx: xyresult.x,\r\n        ny: xyresult.y,\r\n      },\r\n    });\r\n    weatherapiresult = result?.data?.response?.body?.items?.item;\r\n    console.log(\"openAPI axios 결과 \", weatherapiresult);\r\n    return weatherapiresult;\r\n  } catch (e) {\r\n    console.log(\"openAPI axios 에러발생\", e);\r\n  }\r\n}; //weatherapi\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,WAAW,KAAQ,aAAa,CAEzC;AACA;AACA,KAAM,CAAAC,GAAG,CACP,0EAA0E,CAC5E;AACA;AACA;AAEA,KAAM,CAAAC,MAAM,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAC5CC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC,CAEnB,KAAM,CAAAM,WAAW,CAAGA,CAAA,GAAM,CACxB,GAAIC,SAAS,CAACC,WAAW,CAAE,KAAAC,aAAA,CAAAC,cAAA,CACzB,QAAS,CAAAC,UAAUA,CAACC,SAAS,CAAE,CAC7BC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC,CAAC,CACzD;AACF,CAEA,QAAS,CAAAK,aAAaA,CAACC,QAAQ,CAAE,KAAAC,gBAAA,CAAAC,iBAAA,CAC/B,KAAM,CAAAC,QAAQ,EAAAF,gBAAA,CAAGD,QAAQ,CAACI,MAAM,UAAAH,gBAAA,iBAAfA,gBAAA,CAAiBE,QAAQ,CAC1C,KAAM,CAAAE,SAAS,EAAAH,iBAAA,CAAGF,QAAQ,CAACI,MAAM,UAAAF,iBAAA,iBAAfA,iBAAA,CAAiBG,SAAS,CAC5C,KAAM,CAAAX,SAAS,CAAG,CAChB;AACAS,QAAQ,CAAE;AACVE,SACF,CAAC,CACDZ,UAAU,CAACC,SAAS,CAAC,CAAE;AACzB,CAEA,QAAS,CAAAY,WAAWA,CAAA,CAAG,CACrBpB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAC5C,CAEA,QAAS,CAAAoB,YAAYA,CAAA,CAAG,CACtBlB,SAAS,CAACC,WAAW,CAACkB,kBAAkB,CAACT,aAAa,CAAEO,WAAW,CAAC,CACtE,CAEA,GAAI,CAAAG,YAAY,CAAGd,YAAY,CAACe,OAAO,CAAC,QAAQ,CAAC,CACjDxB,OAAO,CAACC,GAAG,CACT,qCAAqC,CACrCU,IAAI,CAACC,SAAS,CAACW,YAAY,CAC7B,CAAC,CACDA,YAAY,CAAGZ,IAAI,CAACc,KAAK,CAACF,YAAY,CAAC,CAEvC,GAAIA,YAAY,GAAK,IAAI,CAAE,CACzB;AACAF,YAAY,CAAC,CAAC,CAAE;AAClB,CACA,KAAM,CAAAK,QAAQ,CAAGhC,WAAW,CAC1B,MAAM,CACNiC,MAAM,EAAAtB,aAAA,CAACkB,YAAY,UAAAlB,aAAA,iBAAZA,aAAA,CAAcY,QAAQ,CAAC,CAC9BU,MAAM,EAAArB,cAAA,CAACiB,YAAY,UAAAjB,cAAA,iBAAZA,cAAA,CAAca,SAAS,CAChC,CAAC,CACD,MAAO,CAAAO,QAAQ,CACjB,CAAE;AACJ,CAAC,CAAE;AAEH,MAAO,MAAM,CAAAE,UAAU,CAAG,MAAAC,IAAA,EAAwC,IAAjC,CAAEC,WAAW,CAAEC,WAAY,CAAC,CAAAF,IAAA,CAC3D;AAEA,GAAI,CAAAG,gBAAgB,CAAG,IAAI,CAE3B,KAAM,CAAAN,QAAQ,CAAGxB,WAAW,CAAC,CAAC,CAC9BF,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAEyB,QAAQ,CAAC,CACrD1B,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAE6B,WAAW,CAAC,CAC9D9B,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAE8B,WAAW,CAAC,CAChE,GAAI,KAAAE,YAAA,CAAAC,qBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAA5C,KAAK,CAAC6C,GAAG,CAAC3C,GAAG,CAAE,CAClC4C,MAAM,CAAE,CACNC,UAAU,CAAE5C,MAAM,CAClB6C,SAAS,CAAE,EAAE,CACbC,MAAM,CAAE,CAAC,CACTC,QAAQ,CAAE,MAAM,CAChBC,SAAS,CAAEd,WAAW,CACtBe,SAAS,CAAEd,WAAW,CACtBe,EAAE,CAAEpB,QAAQ,CAACqB,CAAC,CACdC,EAAE,CAAEtB,QAAQ,CAACuB,CACf,CACF,CAAC,CAAC,CACFjB,gBAAgB,CAAGK,MAAM,SAANA,MAAM,kBAAAJ,YAAA,CAANI,MAAM,CAAEa,IAAI,UAAAjB,YAAA,kBAAAC,qBAAA,CAAZD,YAAA,CAAckB,QAAQ,UAAAjB,qBAAA,kBAAAC,sBAAA,CAAtBD,qBAAA,CAAwBkB,IAAI,UAAAjB,sBAAA,kBAAAC,sBAAA,CAA5BD,sBAAA,CAA8BkB,KAAK,UAAAjB,sBAAA,iBAAnCA,sBAAA,CAAqCkB,IAAI,CAC5DtD,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAE+B,gBAAgB,CAAC,CAClD,MAAO,CAAAA,gBAAgB,CACzB,CAAE,MAAOuB,CAAC,CAAE,CACVvD,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEsD,CAAC,CAAC,CACtC,CACF,CAAC,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}