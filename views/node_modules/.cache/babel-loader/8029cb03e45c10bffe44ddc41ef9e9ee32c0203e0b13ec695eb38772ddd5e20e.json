{"ast":null,"code":"import axios from \"axios\";\nimport { getCookie, setCookie } from \"./cookieUtil\";\nimport { API_SERVER_HOST } from \"../api/memberApi\";\nconst jwtAxios = axios.create();\n\n//jwt 재발급\nconst refreshJWT = async (refreshToken, accessToken) => {\n  const host = API_SERVER_HOST;\n  console.log(\"jwtUtil.js refreshJWT진입 \");\n  const header = {\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  };\n  try {\n    const res = await axios.get(`${host}/api/member/refreshToken?refreshToken=${refreshToken}`, header);\n    console.log(\"jwtUtil.js refreshJWT진입 axios 결과 -> \", res);\n    return res.data;\n  } catch (err) {\n    console.log(\"jwtUtil.js refreshJWT진입 catch() -> \", err);\n    //    if (err.response.data.name === \"TokenExpiredError\") {\n    if (err.response.data.error === \"ERROR_REFRESH_TOKEN\") {\n      return Promise.reject({\n        response: {\n          data: {\n            error: \"REQUIRE_LOGIN\"\n          }\n        }\n      });\n    }\n  }\n};\nconst beforeReq = config => {\n  //요청전에 jwt추가\n  //const memberInfo = getCookie(\"member\");\n  // if (!memberInfo) {\n  //   return Promise.reject({ response: { data: { error: \"REQUIRE_LOGIN\" } } });\n  // }\n  // const { accessToken } = memberInfo;\n\n  console.log(\"jwtUtil.js beforeReq() 매개변수config.url=> \", config.url);\n  //const result =\n  //config.url === \"http://localhost:8001/api/diary\" ? true : false;\n\n  // console.log(\"jwtUtil.js beforeReq() 결과\", result);\n  //if (result) {\n  const accessToken = getCookie(\"accessToken\");\n  console.log(\"jwtUtil.js beforeReq() 내 쿠키에 저장된 accessToken 꺼냄 => \", accessToken);\n  config.headers.Authorization = `Bearer ${accessToken}`;\n  return config;\n  //  } else {\n  //   console.log(\n  //     \"jwtUtil.js beforeReq() 매개변수 엑세스토큰 헤더에 넣지않음 config.url=> \",\n  //     config.url\n  //   );\n\n  //   return config;\n  // }\n};\nconst requestFail = err => {\n  console.log(\"jwtUtil.js requestFail() 진입 err->  \", err);\n  return Promise.reject(err);\n};\nconst beforeRes = async res => {\n  console.log(\"jwtUtil.js beforeRes() 진입 res ->  \", res);\n\n  //  const data = res.data;\n  //const accessToken = res.headers.Authorization.accessToken;\n  //const accessToken = res.data.accessToken;\n\n  //console.log(\"cookieUtil.js beforeRes() 받은 accessToken ->\", accessToken);\n  //setCookie(\"accessToken\", accessToken);\n  //if (data && data.error === \"ERROR_ACCESS_TOKEN\") {\n  // if (\n  //   res.response.data.error === \"ERROR_ACCESS_TOKEN\" ||\n  //   res.response.data.error === \"EXPIRED_ACCESS_TOKEN\"\n  // ) {\n  //   console.log(\"cookieUtil.js beforeRes 함수에서 error발생시 토큰재발행 \");\n\n  //   const memberCookieValue = getCookie(\"member\");\n  //   // console.log(\n  //   //   \"jwtUtil.js beforeRes함수에서 member쿠키 저장내용확인 -> \",\n  //   //   memberCookieValue\n  //   // );\n  //   const result = await refreshJWT(memberCookieValue.refreshToken); //새로발급\n\n  //   setCookie(\"member\", JSON.stringify(memberCookieValue), 1);\n\n  //   //원래호출\n  //   const originalRequest = res.config;\n  //   originalRequest.headers.Authorization = `Bearer ${result.accessToken}`;\n  //   return await axios(originalRequest);\n  // }\n  return res;\n};\nconst responseFail = async err => {\n  console.log(\"jwtUtil.js responseFail() 진입 err->  \", err);\n  if (err.message === \"Network Error\" || err.name === \"AxiosError\") {\n    return Promise.reject(err);\n  }\n  if (err.response.data.error === \"ERROR_ACCESS_TOKEN\" || err.response.data.error === \"EXPIRED_ACCESS_TOKEN\" || err.status === 419) {\n    const memberCookieValue = getCookie(\"member\");\n    if (memberCookieValue) {\n      //member쿠키있다면\n      console.log(\"jwtUtil.js responseFail() 진입 member쿠키 -> \", memberCookieValue.user.refreshtoken);\n      const accessToken = getCookie(\"accessToken\");\n      const result = await refreshJWT(memberCookieValue.user.refreshtoken, accessToken); //새로발급\n\n      console.log(\"jwtUtil.js responseFail() 진입 refreshJWT() ->  \", result);\n      setCookie(\"member\", JSON.stringify(result), 1);\n\n      //원래호출\n      const originalRequest = err.config;\n      originalRequest.headers.Authorization = `Bearer ${result.accessToken}`;\n      return await axios(originalRequest);\n    } else {\n      //member쿠키없다면\n      console.log(\"jwtUtil.js responseFail() 진입 err ->  \", err);\n      return Promise.reject(err);\n    }\n  }\n  if (err.response.data.error === \"ERROR_REFRESH_TOKEN\") {\n    return Promise.reject(err);\n  }\n};\njwtAxios.interceptors.request.use(beforeReq, requestFail);\njwtAxios.interceptors.response.use(beforeRes, responseFail);\nexport default jwtAxios;","map":{"version":3,"names":["axios","getCookie","setCookie","API_SERVER_HOST","jwtAxios","create","refreshJWT","refreshToken","accessToken","host","console","log","header","headers","Authorization","res","get","data","err","response","error","Promise","reject","beforeReq","config","url","requestFail","beforeRes","responseFail","message","name","status","memberCookieValue","user","refreshtoken","result","JSON","stringify","originalRequest","interceptors","request","use"],"sources":["C:/Users/win10/Desktop/picdiary/views/src/util/jwtUtil.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\nimport { API_SERVER_HOST } from \"../api/memberApi\";\r\n\r\nconst jwtAxios = axios.create();\r\n\r\n//jwt 재발급\r\nconst refreshJWT = async (refreshToken, accessToken) => {\r\n  const host = API_SERVER_HOST;\r\n\r\n  console.log(\"jwtUtil.js refreshJWT진입 \");\r\n\r\n  const header = { headers: { Authorization: `Bearer ${accessToken}` } };\r\n\r\n  try {\r\n    const res = await axios.get(\r\n      `${host}/api/member/refreshToken?refreshToken=${refreshToken}`,\r\n      header\r\n    );\r\n    console.log(\"jwtUtil.js refreshJWT진입 axios 결과 -> \", res);\r\n    return res.data;\r\n  } catch (err) {\r\n    console.log(\"jwtUtil.js refreshJWT진입 catch() -> \", err);\r\n    //    if (err.response.data.name === \"TokenExpiredError\") {\r\n    if (err.response.data.error === \"ERROR_REFRESH_TOKEN\") {\r\n      return Promise.reject({ response: { data: { error: \"REQUIRE_LOGIN\" } } });\r\n    }\r\n  }\r\n};\r\n\r\nconst beforeReq = (config) => {\r\n  //요청전에 jwt추가\r\n  //const memberInfo = getCookie(\"member\");\r\n  // if (!memberInfo) {\r\n  //   return Promise.reject({ response: { data: { error: \"REQUIRE_LOGIN\" } } });\r\n  // }\r\n  // const { accessToken } = memberInfo;\r\n\r\n  console.log(\"jwtUtil.js beforeReq() 매개변수config.url=> \", config.url);\r\n  //const result =\r\n  //config.url === \"http://localhost:8001/api/diary\" ? true : false;\r\n\r\n  // console.log(\"jwtUtil.js beforeReq() 결과\", result);\r\n  //if (result) {\r\n  const accessToken = getCookie(\"accessToken\");\r\n  console.log(\r\n    \"jwtUtil.js beforeReq() 내 쿠키에 저장된 accessToken 꺼냄 => \",\r\n    accessToken\r\n  );\r\n  config.headers.Authorization = `Bearer ${accessToken}`;\r\n\r\n  return config;\r\n  //  } else {\r\n  //   console.log(\r\n  //     \"jwtUtil.js beforeReq() 매개변수 엑세스토큰 헤더에 넣지않음 config.url=> \",\r\n  //     config.url\r\n  //   );\r\n\r\n  //   return config;\r\n  // }\r\n};\r\n\r\nconst requestFail = (err) => {\r\n  console.log(\"jwtUtil.js requestFail() 진입 err->  \", err);\r\n\r\n  return Promise.reject(err);\r\n};\r\n\r\nconst beforeRes = async (res) => {\r\n  console.log(\"jwtUtil.js beforeRes() 진입 res ->  \", res);\r\n\r\n  //  const data = res.data;\r\n  //const accessToken = res.headers.Authorization.accessToken;\r\n  //const accessToken = res.data.accessToken;\r\n\r\n  //console.log(\"cookieUtil.js beforeRes() 받은 accessToken ->\", accessToken);\r\n  //setCookie(\"accessToken\", accessToken);\r\n  //if (data && data.error === \"ERROR_ACCESS_TOKEN\") {\r\n  // if (\r\n  //   res.response.data.error === \"ERROR_ACCESS_TOKEN\" ||\r\n  //   res.response.data.error === \"EXPIRED_ACCESS_TOKEN\"\r\n  // ) {\r\n  //   console.log(\"cookieUtil.js beforeRes 함수에서 error발생시 토큰재발행 \");\r\n\r\n  //   const memberCookieValue = getCookie(\"member\");\r\n  //   // console.log(\r\n  //   //   \"jwtUtil.js beforeRes함수에서 member쿠키 저장내용확인 -> \",\r\n  //   //   memberCookieValue\r\n  //   // );\r\n  //   const result = await refreshJWT(memberCookieValue.refreshToken); //새로발급\r\n\r\n  //   setCookie(\"member\", JSON.stringify(memberCookieValue), 1);\r\n\r\n  //   //원래호출\r\n  //   const originalRequest = res.config;\r\n  //   originalRequest.headers.Authorization = `Bearer ${result.accessToken}`;\r\n  //   return await axios(originalRequest);\r\n  // }\r\n  return res;\r\n};\r\n\r\nconst responseFail = async (err) => {\r\n  console.log(\"jwtUtil.js responseFail() 진입 err->  \", err);\r\n\r\n  if (err.message === \"Network Error\" || err.name === \"AxiosError\") {\r\n    return Promise.reject(err);\r\n  }\r\n\r\n  if (\r\n    err.response.data.error === \"ERROR_ACCESS_TOKEN\" ||\r\n    err.response.data.error === \"EXPIRED_ACCESS_TOKEN\" ||\r\n    err.status === 419\r\n  ) {\r\n    const memberCookieValue = getCookie(\"member\");\r\n\r\n    if (memberCookieValue) {\r\n      //member쿠키있다면\r\n      console.log(\r\n        \"jwtUtil.js responseFail() 진입 member쿠키 -> \",\r\n        memberCookieValue.user.refreshtoken\r\n      );\r\n      const accessToken = getCookie(\"accessToken\");\r\n\r\n      const result = await refreshJWT(\r\n        memberCookieValue.user.refreshtoken,\r\n        accessToken\r\n      ); //새로발급\r\n\r\n      console.log(\"jwtUtil.js responseFail() 진입 refreshJWT() ->  \", result);\r\n\r\n      setCookie(\"member\", JSON.stringify(result), 1);\r\n\r\n      //원래호출\r\n      const originalRequest = err.config;\r\n      originalRequest.headers.Authorization = `Bearer ${result.accessToken}`;\r\n      return await axios(originalRequest);\r\n    } else {\r\n      //member쿠키없다면\r\n      console.log(\"jwtUtil.js responseFail() 진입 err ->  \", err);\r\n\r\n      return Promise.reject(err);\r\n    }\r\n  }\r\n\r\n  if (err.response.data.error === \"ERROR_REFRESH_TOKEN\") {\r\n    return Promise.reject(err);\r\n  }\r\n};\r\n\r\njwtAxios.interceptors.request.use(beforeReq, requestFail);\r\njwtAxios.interceptors.response.use(beforeRes, responseFail);\r\n\r\nexport default jwtAxios;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}