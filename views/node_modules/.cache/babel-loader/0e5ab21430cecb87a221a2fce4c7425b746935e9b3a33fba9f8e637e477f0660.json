{"ast":null,"code":"import axios from \"axios\";\nimport { dfs_xy_conv } from \"../utils/xy\";\n\n//const URL = \"http://apis.data.go.kr/B551182/\";\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0\nconst URL = \"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\";\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\n//?serviceKey=인증키&numOfRows=10&pageNo=1\n//&base_date=20210628&base_time=0600&nx=55&ny=127\n\nconst apiKey = process.env.REACT_APP_API_KEY;\nconsole.log(apiKey);\nexport const weatherapi = async () => {\n  let latitude = null; //위도\n  let longitude = null; //경도\n\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(function (pos) {\n      console.log(pos);\n      latitude = Math.floor(pos.coords.latitude);\n      longitude = Math.floor(pos.coords.longitude);\n      console.log(\"현재 위치는 : \" + latitude + \", \" + longitude);\n    });\n    if (latitude !== null && longitude !== null) {\n      const xyresult = dfs_xy_conv(\"toXY\", latitude, longitude);\n      console.log(\"위경도를 xy변경후 : \", xyresult);\n      const response = await axios.get(URL, {\n        params: {\n          serviceKey: apiKey,\n          numOfRows: 10,\n          pageNo: 1,\n          dataType: \"JSON\",\n          base_date: \"20250310\",\n          base_time: \"0600\",\n          nx: latitude,\n          ny: longitude\n        }\n      }); //axios\n\n      console.log(\"openAPI axios 결과\", response);\n      return response.data.response.body.items.item;\n    } //위도 경도값존재할경우\n  } //if 위치 지원할경우\n}; //weatherapi","map":{"version":3,"names":["axios","dfs_xy_conv","URL","apiKey","process","env","REACT_APP_API_KEY","console","log","weatherapi","latitude","longitude","navigator","geolocation","getCurrentPosition","pos","Math","floor","coords","xyresult","response","get","params","serviceKey","numOfRows","pageNo","dataType","base_date","base_time","nx","ny","data","body","items","item"],"sources":["C:/Users/win10/Desktop/picdiary/views/src/api/openApi.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { dfs_xy_conv } from \"../utils/xy\";\r\n\r\n//const URL = \"http://apis.data.go.kr/B551182/\";\r\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0\r\nconst URL =\r\n  \"http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\";\r\n//http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst\r\n//?serviceKey=인증키&numOfRows=10&pageNo=1\r\n//&base_date=20210628&base_time=0600&nx=55&ny=127\r\n\r\nconst apiKey = process.env.REACT_APP_API_KEY;\r\nconsole.log(apiKey);\r\n\r\nexport const weatherapi = async () => {\r\n  let latitude = null; //위도\r\n  let longitude = null; //경도\r\n\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(function (pos) {\r\n      console.log(pos);\r\n      latitude = Math.floor(pos.coords.latitude);\r\n      longitude = Math.floor(pos.coords.longitude);\r\n      console.log(\"현재 위치는 : \" + latitude + \", \" + longitude);\r\n    });\r\n\r\n    if (latitude !== null && longitude !== null) {\r\n      const xyresult = dfs_xy_conv(\"toXY\", latitude, longitude);\r\n\r\n      console.log(\"위경도를 xy변경후 : \", xyresult);\r\n\r\n      const response = await axios.get(URL, {\r\n        params: {\r\n          serviceKey: apiKey,\r\n          numOfRows: 10,\r\n          pageNo: 1,\r\n          dataType: \"JSON\",\r\n          base_date: \"20250310\",\r\n          base_time: \"0600\",\r\n          nx: latitude,\r\n          ny: longitude,\r\n        },\r\n      }); //axios\r\n\r\n      console.log(\"openAPI axios 결과\", response);\r\n\r\n      return response.data.response.body.items.item;\r\n    } //위도 경도값존재할경우\r\n  } //if 위치 지원할경우\r\n}; //weatherapi\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA;AACA,MAAMC,GAAG,GACP,0EAA0E;AAC5E;AACA;AACA;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAC5CC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;AAEnB,OAAO,MAAMM,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAIC,QAAQ,GAAG,IAAI,CAAC,CAAC;EACrB,IAAIC,SAAS,GAAG,IAAI,CAAC,CAAC;;EAEtB,IAAIC,SAAS,CAACC,WAAW,EAAE;IACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,UAAUC,GAAG,EAAE;MACtDR,OAAO,CAACC,GAAG,CAACO,GAAG,CAAC;MAChBL,QAAQ,GAAGM,IAAI,CAACC,KAAK,CAACF,GAAG,CAACG,MAAM,CAACR,QAAQ,CAAC;MAC1CC,SAAS,GAAGK,IAAI,CAACC,KAAK,CAACF,GAAG,CAACG,MAAM,CAACP,SAAS,CAAC;MAC5CJ,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGE,QAAQ,GAAG,IAAI,GAAGC,SAAS,CAAC;IACxD,CAAC,CAAC;IAEF,IAAID,QAAQ,KAAK,IAAI,IAAIC,SAAS,KAAK,IAAI,EAAE;MAC3C,MAAMQ,QAAQ,GAAGlB,WAAW,CAAC,MAAM,EAAES,QAAQ,EAAEC,SAAS,CAAC;MAEzDJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEW,QAAQ,CAAC;MAEtC,MAAMC,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAG,CAACnB,GAAG,EAAE;QACpCoB,MAAM,EAAE;UACNC,UAAU,EAAEpB,MAAM;UAClBqB,SAAS,EAAE,EAAE;UACbC,MAAM,EAAE,CAAC;UACTC,QAAQ,EAAE,MAAM;UAChBC,SAAS,EAAE,UAAU;UACrBC,SAAS,EAAE,MAAM;UACjBC,EAAE,EAAEnB,QAAQ;UACZoB,EAAE,EAAEnB;QACN;MACF,CAAC,CAAC,CAAC,CAAC;;MAEJJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEY,QAAQ,CAAC;MAEzC,OAAOA,QAAQ,CAACW,IAAI,CAACX,QAAQ,CAACY,IAAI,CAACC,KAAK,CAACC,IAAI;IAC/C,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}